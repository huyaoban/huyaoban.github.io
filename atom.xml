<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡尔摩斯</title>
  
  <subtitle>胡尔摩斯</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huermosi.xyz/"/>
  <updated>2021-04-26T12:40:52.021Z</updated>
  <id>http://huermosi.xyz/</id>
  
  <author>
    <name>胡尔摩斯</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SqlSessionTemplate是如何保证MyBatis中SqlSession的线程安全的</title>
    <link href="http://huermosi.xyz/2021/9527888015/"/>
    <id>http://huermosi.xyz/2021/9527888015/</id>
    <published>2021-04-15T09:43:20.000Z</published>
    <updated>2021-04-26T12:40:52.021Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、DefaultSqlSession的线程不安全性"><a href="#一、DefaultSqlSession的线程不安全性" class="headerlink" title="一、DefaultSqlSession的线程不安全性"></a>一、DefaultSqlSession的线程不安全性</h4><p>在MyBatis架构中SqlSession是提供给外层调用的顶层接口，实现类有：DefaultSqlSession、SqlSessionManager以及mybatis-spring提供的实现SqlSessionTemplate。默认的实现类为DefaultSqlSession如。类图结构如下所示：</p><p><img src="/2021/9527888015/1.png" alt title="点击放大"></p><p>对于MyBatis提供的原生实现类来说，用的最多的就是DefaultSqlSession，但我们知道DefaultSqlSession这个类不是线程安全的！如下：</p><p><img src="/2021/9527888015/2.png" alt title="点击放大"></p><h4 id="二、SqlSessionTemplate是如何使用DefaultSqlSession的"><a href="#二、SqlSessionTemplate是如何使用DefaultSqlSession的" class="headerlink" title="二、SqlSessionTemplate是如何使用DefaultSqlSession的"></a>二、SqlSessionTemplate是如何使用DefaultSqlSession的</h4><p>而在我们开发的时候肯定会用到Spring，也会用到mybatis-spring框架，在使用MyBatis与Spring集成的时候我们会用到了SqlSessionTemplate这个类，例如下边的配置，注入一个单例的SqlSessionTemplate对象：</p><p><img src="/2021/9527888015/3.png" alt title="点击放大"></p><p>SqlSessionTemplate的源代码注释如下：</p><p><img src="/2021/9527888015/4.png" alt title="点击放大"></p><p><img src="/2021/9527888015/5.png" alt title="点击放大"></p><p>通过源码我们何以看到 SqlSessionTemplate实现了SqlSession接口，也就是说我们可以使用SqlSessionTemplate来代理以往的DefaultSqlSession完成对数据库的操作，但是DefaultSqlSession这个类不是线程安全的，所以DefaultSqlSession这个类不可以被设置成单例模式的。</p><p>如果是常规开发模式的话，我们每次在使用DefaultSqlSession的时候都从SqlSessionFactory当中获取一个就可以了。但是与Spring集成以后，Spring提供了一个全局唯一的SqlSessionTemplate对象来完成DefaultSqlSession的功能，问题就是：无论是多个Dao使用一个SqlSessionTemplate，还是一个Dao使用一个SqlSessionTemplate，SqlSessionTemplate都是对应一个sqlSession对象，当多个web线程调用同一个Dao时，它们使用的是同一个SqlSessionTemplate，也就是同一个SqlSession，那么它是如何确保线程安全的呢？让我们一起来分析一下：</p><h4 id="三、SqlSessionTemplate是如何保证DefaultSqlSession线程安全的"><a href="#三、SqlSessionTemplate是如何保证DefaultSqlSession线程安全的" class="headerlink" title="三、SqlSessionTemplate是如何保证DefaultSqlSession线程安全的"></a>三、SqlSessionTemplate是如何保证DefaultSqlSession线程安全的</h4><p>（1）首先，通过如下代码创建代理类，表示创建SqlSessionFactory的代理类的实例，该代理类实现SqlSession接口，定义了方法拦截器，如果调用代理类实例中实现SqlSession接口定义的方法，该调用则被导向SqlSessionInterceptor的invoke方法（代理对象的InvocationHandler就是SqlSessionInterceptor，如果把它命名为<br>SqlSessionInvocationHandler则更好理解！）</p><p><img src="/2021/9527888015/6.png" alt title="点击放大"></p><p>核心代码就在 SqlSessionInterceptor的invoke方法当中。</p><p><img src="/2021/9527888015/7.png" alt title="点击放大"><br><img src="/2021/9527888015/8.png" alt title="点击放大"></p><p>在上面的invoke方法当中使用了两个工具方法分别是：</p><p><img src="/2021/9527888015/9.png" alt title="点击放大"></p><p>那么这两个方法又是如何与Spring的事物进行关联的呢？</p><p>1、getSqlSession方法如下：</p><p><img src="/2021/9527888015/10.png" alt title="点击放大"></p><p>2、closeSqlSession方法如下：</p><p><img src="/2021/9527888015/11.png" alt title="点击放大"></p><p>大致的分析到此为止，可能有些许不够顺畅，不过：纸上得来终觉浅，绝知此事要躬行！还希望小伙伴打开自己的编译器，找到此处的代码，认真走一遍流程！</p><p>其实通过上面的代码我们可以看出Mybatis在很多地方都用到了代理模式，代理模式可以说是一种经典模式，其实不紧紧在这个地方用到了代理模式，Spring的事物、AOP、Mybatis数据库连接池技术、MyBatis的核心原理（如何在只有接口没有实现类的情况下完成数据库的操作！）等技术都使用了代理技术。</p><h4 id="四、SqlSessionManager又是什么鬼？"><a href="#四、SqlSessionManager又是什么鬼？" class="headerlink" title="四、SqlSessionManager又是什么鬼？"></a>四、SqlSessionManager又是什么鬼？</h4><p>上述说了SqlSession的实现还有一个SqlSessionManager，那么SqlSessionManager到底是什么个东西哪？且看定义如下：</p><p><img src="/2021/9527888015/12.png" alt title="点击放大"></p><p>你可能会发现SqlSessionManager的构造方法竟然是private的，那我们怎么创建这个对象哪？其实SqlSessionManager创建对象是通过newInstance的方法创建对象的，但需要注意的是他虽然有私有的构造方法，并且提供给我们了一个公有的newInstance方法，但它并不是一个单例模式！</p><p>newInstance有很多重载的方法，如下所示：</p><p><img src="/2021/9527888015/13.png" alt title="点击放大"></p><p>SqlSessionManager的openSession方法及其重载的方法是直接通过调用其中底层封装的SqlSessionFactory对象的openSession方法来创建SqlSession对象的，重载方法如下：</p><p><img src="/2021/9527888015/14.png" alt title="点击放大"></p><p>SqlSessionManager中实现了SqlSession接口中的方法，例如：select、update等，都是直接调用sqlSessionProxy代理对象中相应的方法。在创建该代理对像的时候使用的InvocationHandler对象是SqlSessionInterceptor，他是定义在SqlSessionManager的一个内部类，其定义如下：</p><p><img src="/2021/9527888015/15.png" alt title="点击放大"></p><h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h4><p>综上所述，我们应该大致了解了DefaultSqlSession和SqlSessionManager之间的区别：</p><p>1、DefaultSqlSession的内部没有提供像SqlSessionManager一样通过ThreadLocal的方式来保证线程的安全性；</p><p>2、SqlSessionManager是通过localSqlSession这个ThreadLocal变量，记录与当前线程绑定的SqlSession对象，供当前线程循环使用，从而避免在同一个线程多次创建SqlSession对象造成的性能损耗；</p><p>3、DefaultSqlSession不是线程安全的，我们在进行原生开发的时候，需要每次为一个操作都创建一个SqlSession对象，其性能可想而知；</p><p><img src="/2021/9527888015/16.png" alt title="点击放大"></p><p>在上面的invoke方法当中使用了两个工具方法分别是：</p><p><img src="/2021/9527888015/17.png" alt title="点击放大"></p><p>那么这两个方法又是如何与Spring的事物进行关联的呢？</p><p>1、getSqlSession方法如下：</p><p><img src="/2021/9527888015/18.png" alt title="点击放大"></p><p>2、closeSqlSession方法如下：</p><p><img src="/2021/9527888015/19.png" alt title="点击放大"></p><p>大致的分析到此为止，可能有些许不够顺畅，不过：纸上得来终觉浅，绝知此事要躬行！还希望小伙伴打开自己的编译器，找到此处的代码，认真走一遍流程！</p><p>其实通过上面的代码我们可以看出Mybatis在很多地方都用到了代理模式，代理模式可以说是一种经典模式，其实不紧紧在这个地方用到了代理模式，Spring的事物、AOP、Mybatis数据库连接池技术、MyBatis的核心原理（如何在只有接口没有实现类的情况下完成数据库的操作！）等技术都使用了代理技术。</p><h4 id="四、SqlSessionManager又是什么鬼？-1"><a href="#四、SqlSessionManager又是什么鬼？-1" class="headerlink" title="四、SqlSessionManager又是什么鬼？"></a>四、SqlSessionManager又是什么鬼？</h4><p>上述说了SqlSession的实现还有一个SqlSessionManager，那么SqlSessionManager到底是什么个东西哪？且看定义如下：</p><p><img src="/2021/9527888015/20.png" alt title="点击放大"></p><p>你可能会发现SqlSessionManager的构造方法竟然是private的，那我们怎么创建这个对象哪？其实SqlSessionManager创建对象是通过newInstance的方法创建对象的，但需要注意的是他虽然有私有的构造方法，并且提供给我们了一个公有的newInstance方法，但它并不是一个单例模式！</p><p>newInstance有很多重载的方法，如下所示：</p><p><img src="/2021/9527888015/21.png" alt title="点击放大"></p><p>SqlSessionManager的openSession方法及其重载的方法是直接通过调用其中底层封装的SqlSessionFactory对象的openSession方法来创建SqlSession对象的，重载方法如下：</p><p><img src="/2021/9527888015/22.png" alt title="点击放大"></p><p>SqlSessionManager中实现了SqlSession接口中的方法，例如：select、update等，都是直接调用sqlSessionProxy代理对象中相应的方法。在创建该代理对像的时候使用的InvocationHandler对象是SqlSessionInterceptor，他是定义在SqlSessionManager的一个内部类，其定义如下：</p><p><img src="/2021/9527888015/23.png" alt title="点击放大"></p><h4 id="五、总结-1"><a href="#五、总结-1" class="headerlink" title="五、总结"></a>五、总结</h4><p>综上所述，我们应该大致了解了DefaultSqlSession和SqlSessionManager之间的区别：</p><p>1、DefaultSqlSession的内部没有提供像SqlSessionManager一样通过ThreadLocal的方式来保证线程的安全性；</p><p>2、SqlSessionManager是通过localSqlSession这个ThreadLocal变量，记录与当前线程绑定的SqlSession对象，供当前线程循环使用，从而避免在同一个线程多次创建SqlSession对象造成的性能损耗；</p><p>3、DefaultSqlSession不是线程安全的，我们在进行原生开发的时候，需要每次为一个操作都创建一个SqlSession对象，其性能可想而知；</p><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6529269074583618061/" target="_blank" rel="noopener">灯塔大数据</a>头条，原文连接点<a href="https://www.toutiao.com/i6529269074583618061/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、DefaultSqlSession的线程不安全性&quot;&gt;&lt;a href=&quot;#一、DefaultSqlSession的线程不安全性&quot; class=&quot;headerlink&quot; title=&quot;一、DefaultSqlSession的线程不安全性&quot;&gt;&lt;/a&gt;一、Defaul
      
    
    </summary>
    
    
      <category term="MYBATIS" scheme="http://huermosi.xyz/categories/MYBATIS/"/>
    
    
      <category term="MYBATIS" scheme="http://huermosi.xyz/tags/MYBATIS/"/>
    
      <category term="SQLSESSION" scheme="http://huermosi.xyz/tags/SQLSESSION/"/>
    
  </entry>
  
  <entry>
    <title>有点狠有点猛，我用责任链模式重构了业务代码</title>
    <link href="http://huermosi.xyz/2021/9527202104222212000/"/>
    <id>http://huermosi.xyz/2021/9527202104222212000/</id>
    <published>2021-04-07T13:28:07.000Z</published>
    <updated>2021-04-08T08:49:31.516Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>文章开篇，抛出一个老生常谈的问题，学习设计模式有什么作用？</p><blockquote><p>设计模式主要是为了应对代码的复杂性，让其满足开闭原则，提高代码的扩展性</p></blockquote><p>另外，学习的设计模式 一定要在业务代码中落实，只有理论没有真正实施，是无法真正掌握并且灵活运用设计模式的</p><p>这篇文章主要说 责任链设计模式，认识此模式是在读 Mybatis 源码时， Interceptor 拦截器主要使用的就是责任链，当时读过后就留下了很深的印象（内心 OS：还能这样玩）</p><p>文章先从基础概念说起，另外分析一波 Mybatis 源码中是如何运用的，最后按照 “习俗”，设计一个真实业务场景上的应用</p><blockquote><p>责任链设计模式大纲如下：<br>什么是责任链模式 完成真实的责任链业务场景设计 Mybatis Interceptor 底层实现 责任链模式总结</p></blockquote><h4 id="2-什么是责任链模式"><a href="#2-什么是责任链模式" class="headerlink" title="2. 什么是责任链模式"></a>2. 什么是责任链模式</h4><p>举个例子，SpringMvc 中可以定义拦截器，并且可以定义多个。当一个用户发起请求时，顺利的话请求会经过所有拦截器，最终到达业务代码逻辑，SpringMvc 拦截器设计就是使用了责任链模式</p><blockquote><p>为什么说顺利的话会经过所有拦截器？因为请求不满足拦截器自定义规则会被打回，但这并不是责任链模式的唯一处理方式，继续往下看</p></blockquote><p>在责任链模式中，多个处理器（参照上述拦截器）依次处理同一个请求。一个请求先经过 A 处理器处理，然后再把请求传递给 B 处理器，B 处理器处理完后再传递给 C 处理器，以此类推，形成一个链条，链条上的每个处理器 各自承担各自的处理职责</p><p>责任链模式中多个处理器形成的处理器链在进行处理请求时，有两种处理方式：</p><ol><li>请求会被 所有的处理器都处理一遍，不存在中途终止的情况，这里参照 MyBatis 拦截器理解</li><li>二则是处理器链执行请求中，某一处理器执行时，如果不符合自制定规则的话，停止流程，并且剩下未执行处理器就不会被执行，大家参照 SpringMvc 拦截器理解</li></ol><p>这里通过代码的形式对两种处理方式作出解答，方便读者更好的理解。首先看下第一种，请求会经过所有处理器执行的情况<br><img src="/2021/9527202104222212000/1.png" alt title="点击放大"></p><p>IHandler 负责抽象处理器行为，handle() 则是不同处理器具体需要执行的方法，HandleA、HandleB 为具体需要执行的处理器类，HandlerChain 则是将处理器串成一条链执行的处理器链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HandlerChain handlerChain = <span class="keyword">new</span> HandlerChain();</span><br><span class="line">        handlerChain.addHandler(Lists.newArrayList(<span class="keyword">new</span> HandlerA(), <span class="keyword">new</span> HandlerB()));</span><br><span class="line">        handlerChain.handle();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 程序执行结果：</span></span><br><span class="line"><span class="comment">         * HandlerA打印：执行 HandlerA</span></span><br><span class="line"><span class="comment">         * HandlerB打印：执行 HandlerB</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种责任链执行方式会将所有的 处理器全部执行一遍，不会被打断。Mybatis 拦截器用的正是此类型，这种类型 重点在对请求过程中的数据或者行为进行改变<br><img src="/2021/9527202104222212000/2.gif" alt title="点击放大"></p><p>而另外一种责任链模式实现，则是会对请求有阻断作用，阻断产生的前置条件是在处理器中自定义的，代码中的实现较简单，读者可以联想 SpringMvc 拦截器的实现流程<br><img src="/2021/9527202104222212000/3.png" alt title="点击放大"></p><p>根据代码看得出来，在每一个 IHandler 实现类中会返回一个布尔类型的返回值，如果返回布尔值为 false，那么责任链发起类会中断流程，剩余处理器将不会被执行。就像我们定义在 SpringMvc 中的 Token 拦截器，如果 Token 失效就不能继续访问系统，处理器将请求打回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HandlerChain handlerChain = <span class="keyword">new</span> HandlerChain();</span><br><span class="line">        handlerChain.addHandler(Lists.newArrayList(<span class="keyword">new</span> HandlerA(), <span class="keyword">new</span> HandlerB()));</span><br><span class="line">        <span class="keyword">boolean</span> resultFlag = handlerChain.handle();</span><br><span class="line">        <span class="keyword">if</span> (!resultFlag) &#123;</span><br><span class="line">            System.out.println(<span class="string">"责任链中处理器不满足条件"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读者可以自己在 IDEA 中实现两种不同的责任链模式，对比其中的不同，设想下业务中真实的应用场景，再或者可以跑 SpringBoot 项目，创建多个拦截器来佐证文中的说辞<br><img src="/2021/9527202104222212000/4.png" alt title="点击放大"></p><p>本章节介绍了责任链设计模式的具体语义，以及不同责任链实现类型代码举例，并以 Mybatis、SpringMvc 拦截器为参照点，介绍各自不同的代码实现以及应用场景</p><h4 id="3-责任链业务场景设计"><a href="#3-责任链业务场景设计" class="headerlink" title="3. 责任链业务场景设计"></a>3. 责任链业务场景设计</h4><p>趁热打铁，本小节对使用的真实业务场景进行举例说明。假设业务场景是这样的，我们 系统处在一个下游服务，因为业务需求，系统中所使用的 基础数据需要从上游中台同步到系统数据库</p><p>基础数据包含了很多类型数据，虽然数据在中台会有一定验证，但是 数据只要是人为录入就极可能存在问题，遵从对上游系统不信任原则，需要对数据接收时进行一系列校验</p><p>最初是要进行一系列验证原则才能入库的，后来因为工期问题只放了一套非空验证，趁着春节期间时间还算宽裕，把这套验证规则骨架放进去</p><p>从我们系统的接入数据规则而言，个人觉得需要支持以下几套规则</p><ol><li>必填项校验，如果数据无法满足业务所必须字段要求，数据一旦落入库中就会产生一系列问题</li><li>非法字符校验，因为数据如何录入，上游系统的录入规则是什么样的我们都不清楚，这一项规则也是必须的</li><li>长度校验，理由同上，如果系统某字段长度限制 50，但是接入来的数据 500长度，这也会造成问题</li></ol><p>为了让读者了解业务嵌入责任链模式的前因，这里列举了三套校验规则，当然真实中可能不止这三套。但是 一旦将责任链模式嵌入数据同步流程，就会 完全符合文初所提的开闭原则，提高代码的扩展性</p><blockquote><p>本案例设计模式中的开闭原则通过 Spring 提供支持，后续添加新的校验规则就可以不必修改原有代码</p></blockquote><p>这里要再强调下，设计模式的应用场景一定要灵活掌握，只有这样才能在合适的业务场景合理运用对象的设计模式</p><p>既然设计模式场景说过了，最后说一下需要达成的业务需求。将一个批量数据经过处理器链的处理，返回出符合要求的数据分类<br><img src="/2021/9527202104222212000/5.png" alt title="点击放大"></p><p>定义顶级验证接口和一系列处理器实现类没什么难度，但是应该如何进行链式调用呢？</p><p>这一块代码需要有一定 Spring 基础才能理解，一起来看下 VerifyHandlerChain 如何将所有处理器串成一条链<br><img src="/2021/9527202104222212000/6.png" alt title="点击放大"></p><p>VerifyHandlerChain 处理流程如下：</p><ol><li>实现自 InitializingBean 接口，在对应实现方法中获取 IOC 容器中类型为 VerifyHandler 的 Bean，也就是 EmptyVerifyHandler、SexyVerifyHandler</li><li>将 VerifyHandler 类型的 Bean 添加到处理器链容器中</li><li>定义校验方法 verify()，对入参数据展开处理器链的全部调用，如果过程中发现已无需要验证的数据，直接返回</li></ol><p>这里使用 SpringBoot 项目中默认测试类，来测试一下如何调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VerifyHandlerChain verifyHandlerChain;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; verify = verifyHandlerChain.verify(Lists.newArrayList(<span class="string">"源码兴趣圈"</span>, <span class="string">"@龙台"</span>));</span><br><span class="line">        System.out.println(verify);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，如果客户或者产品提校验相关的需求时，我们只需要实现 VerifyHandler 接口新建个校验规则实现类就 OK 了，这样符合了设计模式的原则：满足开闭原则，提高代码的扩展性</p><p>熟悉之前作者写过设计模式的文章应该知道，强调设计模式重语意，而不是具体的实现过程。所以，你看这个咱们这个校验代码，把责任链两种模式结合了使用</p><p>上面的代码只是示例代码，实际业务中的实现要比这复杂很多，比如：</p><ol><li>如何定义处理器的先后调用顺序。比如说某一个处理器执行时间很长并且过滤数据很少，所以希望把它放到最后面执行</li><li>这是为当前业务的所有数据类型进行过滤，如何自定义单个数据类型过滤。比如你接入学生数据，学号有一定校验规则，这种处理器类肯定只适合单一类型</li></ol><p>还有很多的业务场景，所以设计模式强调的应该是一种思想，而不是固定的代码写法，需要结合业务场景灵活变通</p><h4 id="4-责任链模式的好处"><a href="#4-责任链模式的好处" class="headerlink" title="4. 责任链模式的好处"></a>4. 责任链模式的好处</h4><p>一定要使用责任链模式么？不使用能不能完成业务需求？</p><p>回答是肯定可以，设计模式只是帮助减少代码的复杂性，让其满足开闭原则，提高代码的扩展性。如果不使用同样可以完成需求</p><p>如果不使用责任链模式，上面说的真实同步场景面临两个问题</p><ol><li>如果把上述说的代码逻辑校验规则写到一起，毫无疑问这个类或者说这个方法函数奇大无比。减少代码复杂性一贯方法是：将大块代码逻辑拆分成函数，将大类拆分成小类，是应对代码复杂性的常用方法。如果此时说：可以把不同的校验规则拆分成不同的函数，不同的类，这样不也可以满足减少代码复杂性的要求么。这样拆分是能解决代码复杂性，但是这样就会面临第二个问题</li><li>开闭原则：添加一个新的功能应该是，在已有代码基础上扩展代码，而非修改已有代码。大家设想一下，假设你写了三套校验规则，运行过一段时间，这时候领导让加第四套，是不是要在原有代码上改动</li></ol><p>综上所述，在合适的场景运用适合的设计模式，能够让代码设计复杂性降低，变得更为健壮。朝更远的说也能让自己的编码设计能力有所提高，告别被人吐槽的烂代码…</p><h4 id="5-Mybatis-Interceptor底层实现"><a href="#5-Mybatis-Interceptor底层实现" class="headerlink" title="5. Mybatis Interceptor底层实现"></a>5. Mybatis Interceptor底层实现</h4><p>上面说了那么多，框架底层源码是怎么设计并且使用责任链模式的？之前在看 Mybatis 3.4.x 源码时了解到 Interceptor 底层实现就是责任链模式，这里和读者分享 Interceptor 具体实现</p><p>开门见山，直接把视线聚焦到 Mybatis 源码，版本号 3.4.7-SNAPSHOT<br><img src="/2021/9527202104222212000/7.png" alt title="点击放大"></p><p>熟悉么？是不是和我们上面用到的责任链模式差不太多，有处理器集合 interceptors，有添加处理器方法</p><p>Mybatis Interceptor 不仅用到了责任链，还用到了动态代理，服务于 Mybatis 四大 “护教法王”，在创建对象时通过动态代理和责任链相结合组装而成插件模块</p><ol><li>ParameterHandler</li><li>ResultSetHandler</li><li>StatementHandler</li><li>Executor</li></ol><p>使用过 Mybatis 的读者应该知道，查询 SQL 的分页语句就是使用 Interceptor 实现，比如市场上的 PageHelper、Mybatis-Plus 分页插件再或者我们自实现的分页插件（应该没有项目组使用显示调用多条语句组成分页吧）</p><p>拿查询语句举例，如果定义了多个查询相关的拦截器，会先经过拦截器的代码加工，所有的拦截器执行完毕后才会走真正查询数据库操作<br><img src="/2021/9527202104222212000/8.png" alt title="点击放大"></p><p>扯的话就扯远了，能够知道如何用、在哪用就可以了。通过 Interceptor 也能知道一点，想要读框架源码，需要一定的设计模式基础。如果对责任链、动态代理不清楚，那么就不能理解这一块的精髓</p><h4 id="6-结言"><a href="#6-结言" class="headerlink" title="6. 结言"></a>6. 结言</h4><p>文章通过图文并茂的方式帮助大家理解责任链设计模式，在两种类型示例代码以及举例实际业务场景下，相信小伙伴已经掌握了如何在合适的场景使用责任链设计模式</p><p>看完文章后可以结合 Mybatis、SpringMvc 拦截器更深入掌握责任链模式的应用场景以及使用手法。另外可以结合项目中实际业务场景灵活使用，相信真正使用后的你会对责任链模式产生更深入的了解</p><p>参考文章</p><ul><li>《设计模式之美：职责链模式》</li></ul><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6932756321846755847/" target="_blank" rel="noopener">代码小当家</a>头条，原文连接点<a href="https://www.toutiao.com/i6932756321846755847/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h4&gt;&lt;p&gt;文章开篇，抛出一个老生常谈的问题，学习设计模式有什么作用？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计模式主要是为了应
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://huermosi.xyz/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://huermosi.xyz/tags/JAVA/"/>
    
      <category term="设计模式" scheme="http://huermosi.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="职责链模式" scheme="http://huermosi.xyz/tags/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="MYBATIS" scheme="http://huermosi.xyz/tags/MYBATIS/"/>
    
      <category term="SPRING" scheme="http://huermosi.xyz/tags/SPRING/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot国际化实战，实现语言的自由切换</title>
    <link href="http://huermosi.xyz/2021/952720210072154/"/>
    <id>http://huermosi.xyz/2021/952720210072154/</id>
    <published>2021-04-07T13:02:00.000Z</published>
    <updated>2021-04-08T08:49:31.745Z</updated>
    
    <content type="html"><![CDATA[<p>国际化是每个大型公司官网或者技术文档都会有的，比如前端UI库element、阿里云等，本节我们利用thymeleaf来实现国际化操作。</p><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h4><p>为了方便后续阅读我们新建模块fw-springboot-international，基本的SpringBoot+thymeleaf+国际化信息(message.properties)项目<br><img src="/2021/952720210072154/1.png" alt title="点击放大"></p><h4 id="2-maven配置"><a href="#2-maven配置" class="headerlink" title="2. maven配置"></a>2. maven配置</h4><p>添加thymeleaf依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yisu.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fw-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-国际化配置"><a href="#3-国际化配置" class="headerlink" title="3. 国际化配置"></a>3. 国际化配置</h4><p>设置了一个localeResolver，可以采用Cookie来控制国际化的语言，也可以采用Session来控制，两个启用一个即可。还设置一个LocaleChangeInterceptor拦截器来拦截国际化语言的变化，并且将拦截器加入到Spring中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> xuyisu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/12/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">I18nConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * session区域解析器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SessionLocaleResolver resolver = <span class="keyword">new</span> SessionLocaleResolver();</span><br><span class="line">        resolver.setDefaultLocale(Locale.CHINA);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cookie区域解析器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public LocaleResolver localeResolver() &#123;</span></span><br><span class="line"><span class="comment">//        CookieLocaleResolver slr = new CookieLocaleResolver();</span></span><br><span class="line"><span class="comment">//        //设置默认区域,</span></span><br><span class="line"><span class="comment">//        slr.setDefaultLocale(Locale.CHINA);</span></span><br><span class="line"><span class="comment">//        slr.setCookieMaxAge(3600);//设置cookie有效期.</span></span><br><span class="line"><span class="comment">//        return slr;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleChangeInterceptor <span class="title">localeChangeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocaleChangeInterceptor lci = <span class="keyword">new</span> LocaleChangeInterceptor();</span><br><span class="line">        <span class="comment">// 设置请求地址的参数,默认为：locale</span></span><br><span class="line"><span class="comment">//        lci.setParamName(LocaleChangeInterceptor.DEFAULT_PARAM_NAME);</span></span><br><span class="line">        <span class="keyword">return</span> lci;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(localeChangeInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-控制层"><a href="#4-控制层" class="headerlink" title="4. 控制层"></a>4. 控制层</h4><p>对于使用thymeleaf的我们可以直接跳转到页面，使用方式和JSP类似。这里我们设置默认页面就是跳转到index.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> xuyisu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/12/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-message-信息"><a href="#5-message-信息" class="headerlink" title="5. message 信息"></a>5. message 信息</h4><p>中文zh_CN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">login.userId&#x3D;用户名</span><br><span class="line">login.noUserId&#x3D;请输入用户名</span><br><span class="line">login.password&#x3D;密码</span><br><span class="line">login.noPassword&#x3D;密码不能为空</span><br><span class="line">login.login&#x3D;登录</span><br></pre></td></tr></table></figure><p>英文en_US</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">login.userId &#x3D; Login ID</span><br><span class="line">login.noUserId &#x3D; Please enter the user ID</span><br><span class="line">login.password &#x3D; Password</span><br><span class="line">login.noPassword &#x3D; password can not be blank</span><br><span class="line">login.login &#x3D; Login</span><br></pre></td></tr></table></figure><p><img src="/2021/952720210072154/2.png" alt title="点击放大"></p><h4 id="6-页面"><a href="#6-页面" class="headerlink" title="6. 页面"></a>6. 页面</h4><p>模拟一个简单的表单登录</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot-international<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>  <span class="attr">th:text</span>=<span class="string">"#&#123;login.userId&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.noUserId&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>  <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.noPassword&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>  <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.login&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-应用启动并访问"><a href="#7-应用启动并访问" class="headerlink" title="7. 应用启动并访问"></a>7. 应用启动并访问</h4><p>浏览器输入<a href="http://localhost:8774/" target="_blank" rel="noopener">http://localhost:8774/</a>，可以看到如下表单，默认是中文的，所以他默认会去messages_zh_CN.properties中找，如果没有就会去messages.properties中找。<br><img src="/2021/952720210072154/3.jpg" alt title="点击放大"></p><p>如果输入<a href="http://localhost:8774/?locale=en_US" target="_blank" rel="noopener">http://localhost:8774/?locale=en_US</a>语言就会切到英文。同样的如果url后参数设置为locale=zh_CH，语言就会切到中文<br><img src="/2021/952720210072154/4.png" alt title="点击放大"></p><h4 id="8-前后端分离的情况"><a href="#8-前后端分离的情况" class="headerlink" title="8. 前后端分离的情况"></a>8. 前后端分离的情况</h4><p>对于如果不是thymeleaf的环境，而是前后端分离的情况，可以使用如下方式，通过接口设置语言环境，默认中文，然后通过key 获取对应的value值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置语言环境</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> xuyisu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/12/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LanguageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageUtil messageUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置语言</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lang</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/setLang"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FwResult <span class="title">getInfoByLang</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String lang)</span></span>&#123;</span><br><span class="line">        LocaleResolver localeResolver = RequestContextUtils.getLocaleResolver(request);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"zh"</span>.equals(lang))&#123;</span><br><span class="line">            localeResolver.setLocale(request, response, <span class="keyword">new</span> Locale(<span class="string">"zh"</span>, <span class="string">"CN"</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"en"</span>.equals(lang))&#123;</span><br><span class="line">            localeResolver.setLocale(request, response, <span class="keyword">new</span> Locale(<span class="string">"en"</span>, <span class="string">"US"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> FwResult.okMsg(<span class="string">"设置"</span>+lang+<span class="string">"成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key  获取内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getValue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FwResult <span class="title">getValue</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String welcome = messageUtil.getMessage(key);</span><br><span class="line">        <span class="keyword">return</span> FwResult.ok(welcome);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取message 中的国际化配置信息，这里抽取成一个公共方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMessage(code, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code ：对应messages配置的key.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args : 数组参数.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String code, Object[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMessage(code, args, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code ：对应messages配置的key.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args : 数组参数.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultMessage : 没有设置key的时候的默认值.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String code,Object[] args,String defaultMessage)</span></span>&#123;</span><br><span class="line">        <span class="comment">//这里使用比较方便的方法，不依赖request.</span></span><br><span class="line">        Locale locale = LocaleContextHolder.getLocale();</span><br><span class="line">        <span class="keyword">return</span> messageSource.getMessage(code, args, defaultMessage, locale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-启动应用测试"><a href="#9-启动应用测试" class="headerlink" title="9. 启动应用测试"></a>9. 启动应用测试</h4><p>浏览器或Postman 输入localhost:8774/getValue?key=login.noUserId<br><img src="/2021/952720210072154/5.png" alt title="点击放大"></p><p>修改语言环境localhost:8774/setLang?lang=en<br>浏览器或Postman 再次输入localhost:8774/getValue?key=login.noUserId<br><img src="/2021/952720210072154/6.png" alt title="点击放大"></p><h4 id="10-乱码处理"><a href="#10-乱码处理" class="headerlink" title="10. 乱码处理"></a>10. 乱码处理</h4><p>如果遇到国际化配置文件中存在乱码的情况可以按照下图将标记的部分勾选即可<br><img src="/2021/952720210072154/7.png" alt title="点击放大"></p><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6933834291382059532/" target="_blank" rel="noopener">青锋爱编程</a>头条，原文连接点<a href="https://www.toutiao.com/i6933834291382059532/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;国际化是每个大型公司官网或者技术文档都会有的，比如前端UI库element、阿里云等，本节我们利用thymeleaf来实现国际化操作。&lt;/p&gt;
&lt;h4 id=&quot;1-新建项目&quot;&gt;&lt;a href=&quot;#1-新建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 新建
      
    
    </summary>
    
    
      <category term="SPRING" scheme="http://huermosi.xyz/categories/SPRING/"/>
    
      <category term="SPRINGBOOT" scheme="http://huermosi.xyz/categories/SPRING/SPRINGBOOT/"/>
    
    
      <category term="SPRING" scheme="http://huermosi.xyz/tags/SPRING/"/>
    
      <category term="SPRINGBOOT" scheme="http://huermosi.xyz/tags/SPRINGBOOT/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的万字总结（缓存，索引，Explain，事务，redo日志等）</title>
    <link href="http://huermosi.xyz/2021/9527202101-07%2021:45:05/"/>
    <id>http://huermosi.xyz/2021/9527202101-07%2021:45:05/</id>
    <published>2021-01-07T13:45:05.000Z</published>
    <updated>2021-04-08T08:49:31.676Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-开局一张图"><a href="#1-开局一张图" class="headerlink" title="1. 开局一张图"></a>1. 开局一张图</h4><p>这张图是重点！！！咱要先对MySQL有一个宏观的了解，知道他的执行流程。</p><p>一条SQL语句过来的流程是什么样的？那就follow me。哈哈哈哈，皮一下很开心。</p><ol><li>当客户端连接到MySQL服务器时，服务器对其进行认证。可以通过用户名与密码认证，也可以通过SSL证书进行认证。登录认证后，服务器还会验证客户端是否有执行某个查询的操作权限。</li><li>在正式查询之前，服务器会检查查询缓存，如果能找到对应的查询，则不必进行查询解析，优化，执行等过程，直接返回缓存中的结果集。</li><li>MySQL的解析器会根据查询语句，构造出一个解析树，主要用于根据语法规则来验证语句是否正确，比如SQL的关键字是否正确，关键字的顺序是否正确。</li></ol><p>而预处理器主要是进一步校验，比如表名，字段名是否正确等<br>4. 查询优化器将解析树转化为查询计划，一般情况下，一条查询可以有很多种执行方式，最终返回相同的结果，优化器就是根据成本找到这其中最优的执行计划<br>5. 执行计划调用查询执行引擎，而查询引擎通过一系列API接口查询到数据<br>6. 得到数据之后，在返回给客户端的同时，会将数据存在查询缓存中<br><img src="/2021/9527202101-07%2021:45:05/1.png" alt title="点击放大"></p><h4 id="2-查询缓存"><a href="#2-查询缓存" class="headerlink" title="2. 查询缓存"></a>2. 查询缓存</h4><p>我们先通过show variables like ‘%query_cache%’来看一下默认的数据库配置，此为本地数据库的配置。<br><img src="/2021/9527202101-07%2021:45:05/2.webp" alt title="点击放大"></p><h5 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h5><p>have_query_cache:当前的MYSQL版本是否支持“查询缓存”功能。</p><p>query_cache_limit:MySQL能够缓存的最大查询结果，查询结果大于该值时不会被缓存。默认值是1048576(1MB)</p><p>query_cache_min_res_unit:查询缓存分配的最小块（字节）。默认值是4096（4KB）。当查询进行时，MySQL把查询结果保存在query cache，但是如果保存的结果比较大，超过了query_cache_min_res_unit的值，这时候MySQL将一边检索结果，一边进行保存结果。他保存结果也是按默认大小先分配一块空间，如果不够，又要申请新的空间给他。如果查询结果比较小，默认的query_cache_min_res_unit可能造成大量的内存碎片，如果查询结果比较大，默认的query_cache_min_res_unit又不够，导致一直分配块空间，所以可以根据实际需求，调节query_cache_min_res_unit的大小。</p><p>注：如果上面说的内容有点弯弯绕，那举个现实生活中的例子，比如咱现在要给运动员送水，默认的是500ml的瓶子，如果过来的是少年运动员，可能500ml太大了，他们喝不完，造成了浪费，那我们就可以选择300ml的瓶子，如果过来的是成年运动员，可能500ml不够，那他们一瓶喝完了，又开一瓶，直接不渴为止。那么那样开瓶子也要时间，我们就可以选择1000ml的瓶子。</p><p>query_cache_size:为缓存查询结果分配的总内存。</p><p>query_cache_type:默认为on，可以缓存除了以select sql_no_cache开头的所有查询结果。</p><p>query_cache_wlock_invalidate:如果该表被锁住，是否返回缓存中的数据，默认是关闭的。</p><h5 id="2-2-原理"><a href="#2-2-原理" class="headerlink" title="2.2 原理"></a>2.2 原理</h5><p>MYSQL的查询缓存实质上是缓存SQL的hash值和该SQL的查询结果，如果运行相同的SQL,服务器直接从缓存中去掉结果，而不再去解析，优化，寻找最低成本的执行计划等一系列操作，大大提升了查询速度。</p><p>但是万事有利也有弊。</p><ul><li>第一个弊端就是如果表的数据有一条发生变化，那么缓存好的结果将全部不再有效。这对于频繁更新的表，查询缓存是不适合的。</li></ul><p>比如一张表里面只有两个字段，分别是id和name，数据有一条为1，张三。我使用select * from 表名 where name=“张三”来进行查询，MySQL发现查询缓存中没有此数据，会进行一系列的解析，优化等操作进行数据的查询，查询结束之后将该SQL的hash和查询结果缓存起来，并将查询结果返回给客户端。但是这个时候我有新增了一条数据2，张三。如果我还用相同的SQL来执行，他会根据该SQL的hash值去查询缓存中，那么结果就错了。所以MySQL对于数据有变化的表来说，会直接清空关于该表的所有缓存。这样其实是效率是很差的。</p><ul><li>第二个弊端就是缓存机制是通过对SQL的hash，得出的值为key，查询结果为value来存放的，那么就意味着SQL必须完完全全一模一样，否则就命不中缓存。</li></ul><p>我们都知道hash值的规则，就算很小的查询，哈希出来的结果差距是很多的，所以select * from 表名 where name=“张三”和SELECT * FROM 表名 WHERE NAME=“张三”和select * from 表名 where name = “张三”，三个SQL哈希出来的值是不一样的，大小写和空格影响了他们，所以并不能命中缓存，但其实他们搜索结果是完全一样的。</p><h5 id="2-3-生产如何设置MySQL-Query-Cache"><a href="#2-3-生产如何设置MySQL-Query-Cache" class="headerlink" title="2.3 生产如何设置MySQL Query Cache"></a>2.3 生产如何设置MySQL Query Cache</h5><p>先来看线上参数：<br><img src="/2021/9527202101-07%2021:45:05/2.png" alt title="点击放大"></p><p>我们发现将query_cache_type设置为OFF，其实网上资料和各大云厂商提供的云服务器都是将这个功能关闭的，从上面的原理来看，在一般情况下，他的弊端大于优点。</p><h4 id="3-索引"><a href="#3-索引" class="headerlink" title="3. 索引"></a>3. 索引</h4><h5 id="3-1-例子"><a href="#3-1-例子" class="headerlink" title="3.1 例子"></a>3.1 例子</h5><p>创建一个名为user的表，其包括id，name，age，sex等字段信息。此外，id为主键聚簇索引，idx_name为非聚簇索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_name`</span> (<span class="string">`name`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>我们将其设置10条数据，便于下面的索引的理解。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'andy'</span>, <span class="string">'20'</span>, <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'10'</span>, <span class="string">'baby'</span>, <span class="string">'12'</span>, <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'kat'</span>, <span class="string">'12'</span>, <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'lili'</span>, <span class="string">'20'</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'lucy'</span>, <span class="string">'22'</span>, <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'bill'</span>, <span class="string">'20'</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'zoe'</span>, <span class="string">'20'</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'hay'</span>, <span class="string">'20'</span>, <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'8'</span>, <span class="string">'tony'</span>, <span class="string">'20'</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'9'</span>, <span class="string">'rose'</span>, <span class="string">'21'</span>, <span class="string">'男'</span>);</span><br></pre></td></tr></table></figure><h5 id="3-2-聚簇索引（主键索引）"><a href="#3-2-聚簇索引（主键索引）" class="headerlink" title="3.2 聚簇索引（主键索引）"></a>3.2 聚簇索引（主键索引）</h5><p>先来一张图镇楼，接下来就是看图说话。<br><img src="/2021/9527202101-07%2021:45:05/3.png" alt title="点击放大"><br>他包含两个特点：</p><ol><li>使用记录主键值的大小来进行记录和页的排序。<br>页内的记录是按照主键的大小顺序排成一个单项链表。<br>各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。</li><li>叶子节点存储的是完整的用户记录。<blockquote><p>注：聚簇索引不需要我们显示的创建，他是由InnoDB存储引擎自动为我们创建的。如果没有主键，其也会默认创建一个。复制代码</p></blockquote></li></ol><h5 id="3-3-非聚簇索引（二级索引）"><a href="#3-3-非聚簇索引（二级索引）" class="headerlink" title="3.3 非聚簇索引（二级索引）"></a>3.3 非聚簇索引（二级索引）</h5><p>上面的聚簇索引只能在搜索条件是主键时才能发挥作用，因为聚簇索引可以根据主键进行排序的。如果搜索条件是name，在刚才的聚簇索引上，我们可能遍历，挨个找到符合条件的记录，但是，这样真的是太蠢了，MySQL不会这样做的。</p><p>如果我们想让搜索条件是name的时候，也能使用索引，那可以多创建一个基于name的二叉树。如下图。<br><img src="/2021/9527202101-07%2021:45:05/4.png" alt title="点击放大"><br>他与聚簇索引的不同：</p><ol><li>叶子节点内部使用name字段排序，叶子节点之间也是使用name字段排序。</li><li>叶子节点不再是完整的数据记录，而是name和主键值。</li></ol><p>为什么不再是完整信息？</p><p>MySQL只让聚簇索引的叶子节点存放完整的记录信息，因为如果有好几个非聚簇索引，他们的叶子节点也存放完整的记录绩效，那就不浪费空间啦。</p><p>如果我搜索条件是基于name，需要查询所有字段的信息，那查询过程是啥？</p><ol><li>根据查询条件，采用name的非聚簇索引，先定位到该非聚簇索引某些记录行。</li><li>根据记录行找到相应的id，再根据id到聚簇索引中找到相关记录。这个过程叫做回表。</li></ol><h5 id="3-4-联合索引"><a href="#3-4-联合索引" class="headerlink" title="3.4 联合索引"></a>3.4 联合索引</h5><p>图就不画了，简单来说，如果name和age组成一个联合索引，那么先按name排序，如果name一样，就按age排序。</p><h5 id="3-5-一些原则"><a href="#3-5-一些原则" class="headerlink" title="3.5 一些原则"></a>3.5 一些原则</h5><ol><li>最左前缀原则。一个联合索引（a,b,c）,如果有一个查询条件有a，有b，那么他则走索引，如果有一个查询条件没有a，那么他则不走索引。</li><li>使用唯一索引。具有多个重复值的列，其索引效果最差。例如，存放姓名的列具有不同值，很容易区分每行。而用来记录性别的列，只含有“男”，“女”，不管搜索哪个值，都会得出大约一半的行，这样的索引对性能的提升不够高。</li><li>不要过度索引。每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能。在修改表的内容时，索引必须进行更新，有时可能需要重构，因此，索引越多，所花的时间越长。</li><li>索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</li><li>一定要设置一个主键。前面聚簇索引说到如果不指定主键，InnoDB会自动为其指定主键，这个我们是看不见的。反正都要生成一个主键的，还不如我们设置，以后在某些搜索条件时还能用到主键的聚簇索引。</li><li>主键推荐用自增id，而不是uuid。上面的聚簇索引说到每页数据都是排序的，并且页之间也是排序的，如果是uuid，那么其肯定是随机的，其可能从中间插入，导致页的分裂，产生很多表碎片。如果是自增的，那么其有从小到大自增的，有顺序，那么在插入的时候就添加到当前索引的后续位置。当一页写满，就会自动开辟一个新的页。</li></ol><blockquote><p>注：如果自增id用完了，那将字段类型改为bigint，就算每秒1万条数据，跑100年，也没达到bigint的最大值。</p></blockquote><h5 id="3-6-万年面试题（为什么索引用B-树）"><a href="#3-6-万年面试题（为什么索引用B-树）" class="headerlink" title="3.6 万年面试题（为什么索引用B+树）"></a>3.6 万年面试题（为什么索引用B+树）</h5><ol><li><p>B+树的磁盘读写代价更低：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对IO读写次数就降低了。</p></li><li><p>由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，所以通常B+树用于数据库索引。</p></li></ol><h4 id="4-优化器"><a href="#4-优化器" class="headerlink" title="4. 优化器"></a>4. 优化器</h4><p>在开篇的图里面，我们知道了SQL语句从客户端经由网络协议到查询缓存，如果没有命中缓存，再经过解析工作，得到准确的SQL，现在就来到了我们这模块说的优化器。</p><p>首先，我们知道每一条SQL都有不同的执行方法，要不通过索引，要不通过全表扫描的方式。</p><p>那么问题就来了，MySQL是如何选择时间最短，占用内存最小的执行方法呢？</p><h5 id="4-1-什么是成本？"><a href="#4-1-什么是成本？" class="headerlink" title="4.1 什么是成本？"></a>4.1 什么是成本？</h5><ol><li><p>I/O成本。数据存储在硬盘上，我们想要进行某个操作需要将其加载到内存中，这个过程的时间被称为I/O成本。默认是1。</p></li><li><p>CPU成本。在内存对结果集进行排序的时间被称为CPU成本。默认是0.2。</p></li></ol><h5 id="4-2-单表查询的成本"><a href="#4-2-单表查询的成本" class="headerlink" title="4.2 单表查询的成本"></a>4.2 单表查询的成本</h5><p>先来建一个用户表dev_user，里面包括主键id，用户名username，密码password，外键user_info_id，状态status，外键main_station_id，是否外网访问visit，这七个字段。索引有两个，一个是主键的聚簇索引，另一个是显式添加的以username为字段的唯一索引uname_unique。<br><img src="/2021/9527202101-07%2021:45:05/5.png" alt title="点击放大"></p><p>如果搜索条件是select * from dev_user where username=’XXX’，那么MySQL是如何选择相关索引呢？</p><ol><li><p>使用所有可能用到的索引<br>我们可以看到搜索条件username，所以可能走uname_unique索引。也可以做聚簇索引，也就是全表扫描。</p></li><li><p>计算全表扫描代价<br>我们通过show table status like ‘dev_user’命令知道rows和data_length字段，如下图。<br><img src="/2021/9527202101-07%2021:45:05/6.png" alt title="点击放大"><br>rows：表示表中的记录条数，但是这个数据不准确，是个估计值。</p></li></ol><p>data_length:表示表占用的存储空间字节数。</p><p>data_length=聚簇索引的页面数量X每个页面的大小</p><p>反推出页面数量=1589248÷16÷1024=97</p><p>I/O成本：97X1=97</p><p>CPU成本：6141X0.2=1228</p><p>总成本：97+1228=1325</p><ol start="3"><li>计算使用不同索引执行查询的代价<br>因为要查询出满足条件的所有字段信息，所以要考虑回表成本。<br>I/O成本=1+1X1=2(范围区间的数量+预计二级记录索引条数)</li></ol><p>CPU成本=1X0.2+1X0.2=0.4(读取二级索引的成本+回表聚簇索引的成本)</p><p>总成本=I/O成本+CPU成本=2.4</p><ol start="4"><li>对比各种执行方案的代价，找出成本最低的那个</li></ol><p>上面两个数字一对比，成本是采用uname_unique索引成本最低。</p><h5 id="4-3-多表查询的成本"><a href="#4-3-多表查询的成本" class="headerlink" title="4.3 多表查询的成本"></a>4.3 多表查询的成本</h5><p>对于两表连接查询来说，他的查询成本由下面两个部分构成：</p><ul><li>单次查询驱动表的成本</li><li>多次查询被驱动表的成本（具体查询多次取决于对驱动表查询的结果集有多少个记录）</li></ul><h5 id="4-4-index-dive"><a href="#4-4-index-dive" class="headerlink" title="4.4 index dive"></a>4.4 index dive</h5><p>如果前面的搜索条件不是等值，而是区间，如select * from dev_user where username&gt;’admin’ and username&lt;’test’这个时候我们是无法看出需要回表的数量。</p><p>步骤1：先根据username&gt;’admin’这个条件找到第一条记录，称为区间最左记录。</p><p>步骤2：再根据username&lt;’test’这个条件找到最后一条记录，称为区间最右记录。</p><p>步骤3：如果区间最左记录和区间最右记录相差不是很远，可以准确统计出需要回表的数量。如果相差很远，就先计算10页有多少条记录，再乘以页面数量，最终模糊统计出来。</p><h4 id="5-Explain"><a href="#5-Explain" class="headerlink" title="5. Explain"></a>5. Explain</h4><h5 id="5-1-产品来索命"><a href="#5-1-产品来索命" class="headerlink" title="5.1 产品来索命"></a>5.1 产品来索命</h5><p>产品：为什么这个页面出来这么慢？</p><p>开发：因为你查的数据多呗，他就是这么慢</p><p>产品：我不管，我要这个页面快点，你这样，客户怎么用啊</p><p>开发：。。。。。。。你行你来<br><img src="/2021/9527202101-07%2021:45:05/7.png" alt title="点击放大"></p><p>哈哈哈哈，不瞎BB啦，如果有些SQL贼慢，我们需要知道他有没有走索引，走了哪个索引，这个时候我就需要通过explain关键字来深入了解MySQL内部是如何执行的。<br><img src="/2021/9527202101-07%2021:45:05/8.png" alt title="点击放大"></p><h5 id="5-2-id"><a href="#5-2-id" class="headerlink" title="5.2 id"></a>5.2 id</h5><p>一般来说一个select一个唯一id，如果是子查询，就有两个select，id是不一样的，但是凡事有例外，有些子查询的，他们id是一样的。<br><img src="/2021/9527202101-07%2021:45:05/9.png" alt title="点击放大"></p><p>这是为什么呢？</p><p>那是因为MySQL在进行优化的时候已经将子查询改成了连接查询，而连接查询的id是一样的。</p><h5 id="5-3-select-type"><a href="#5-3-select-type" class="headerlink" title="5.3 select_type"></a>5.3 select_type</h5><ul><li>simple：不包括union和子查询的查询都算simple类型。</li><li>primary：包括union，union all，其中最左边的查询即为primary。</li><li>union：包括union，union all，除了最左边的查询，其他的查询类型都为union。</li></ul><h5 id="5-4-table"><a href="#5-4-table" class="headerlink" title="5.4 table"></a>5.4 table</h5><p>显示这一行是关于哪张表的。</p><h5 id="5-5-type：访问方法"><a href="#5-5-type：访问方法" class="headerlink" title="5.5 type：访问方法"></a>5.5 type：访问方法</h5><ul><li>ref：普通二级索引与常量进行等值匹配</li><li>ref_or_null：普通二级索引与常量进行等值匹配，该索引可能是null</li><li>const：主键或唯一二级索引列与常量进行等值匹配</li><li>range：范围区间的查询</li><li>all：全表扫描</li></ul><h5 id="5-6-possible-keys"><a href="#5-6-possible-keys" class="headerlink" title="5.6 possible_keys"></a>5.6 possible_keys</h5><p>对某表进行单表查询时可能用到的索引</p><h5 id="5-7-key"><a href="#5-7-key" class="headerlink" title="5.7 key"></a>5.7 key</h5><p>经过查询优化器计算不同索引的成本，最终选择成本最低的索引</p><h5 id="5-8-rows"><a href="#5-8-rows" class="headerlink" title="5.8 rows"></a>5.8 rows</h5><ul><li>如果使用全表扫描，那么rows就代表需要扫描的行数</li><li>如果使用索引，那么rows就代表预计扫描的行数</li></ul><h5 id="5-9-filtered"><a href="#5-9-filtered" class="headerlink" title="5.9 filtered"></a>5.9 filtered</h5><ul><li>如果全表扫描，那么filtered就代表满足搜索条件的记录的满分比</li><li>如果是索引，那么filtered就代表除去索引对应的搜索，其他搜索条件的百分比</li></ul><h4 id="6-redo日志（物理日志）"><a href="#6-redo日志（物理日志）" class="headerlink" title="6. redo日志（物理日志）"></a>6. redo日志（物理日志）</h4><p>InnoDB存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作都是将页的数据加载到内存中，然后进行操作，再将数据刷回到硬盘上。</p><p>那么问题就来了，如果我要给张三转账100块钱，事务已经提交了，这个时候InnoDB把数据加载到内存中，这个时候还没来得及刷入硬盘，突然停电了，数据库崩了。重启之后，发现我的钱没有转成功，这不是尴尬了吗？</p><p>解决方法很明显，我们在硬盘加载到内存之后，进行一系列操作，一顿操作猛如虎，还未刷新到硬盘之前，先记录下，在XXX位置我的记录中金额减100，在XXX位置张三的记录中金额加100，然后再进行增删改查操作，最后刷入硬盘。如果未刷入硬盘，在重启之后，先加载之前的记录，那么数据就回来了。</p><p>这个记录就叫做重做日志，即redo日志。他的目的是想让已经提交的事务对数据的修改是永久的，就算他重启，数据也能恢复出来。</p><h5 id="6-1-log-buffer（日志缓冲区）"><a href="#6-1-log-buffer（日志缓冲区）" class="headerlink" title="6.1 log buffer（日志缓冲区）"></a>6.1 log buffer（日志缓冲区）</h5><p>为了解决磁盘速度过慢的问题，redo日志不能直接写入磁盘，咱先整一大片连续的内存空间给他放数据。这一大片内存就叫做日志缓冲区，即log buffer。到了合适的时候，再刷入硬盘。至于什么时候是合适的，这个下一章节说。</p><p>我们可以通过show VARIABLES like ‘innodb_log_buffer_size’命令来查看当前的日志缓存大小，下图为线上的大小。<br><img src="/2021/9527202101-07%2021:45:05/10.png" alt title="点击放大"></p><h5 id="6-2-redo日志刷盘时机"><a href="#6-2-redo日志刷盘时机" class="headerlink" title="6.2 redo日志刷盘时机"></a>6.2 redo日志刷盘时机</h5><p>由于redo日志一直都是增长的，且内存空间有限，数据也不能一直待在缓存中， 我们需要将其刷新至硬盘上。</p><p>那什么时候刷新到硬盘呢？</p><ul><li>log buffer空间不足。上面有指定缓冲区的内存大小，MySQL认为日志量已经占了 总容量的一半左右，就需要将这些日志刷新到磁盘上。</li><li>事务提交时。我们使用redo日志的目的就是将他未刷新到磁盘的记录保存起来，防止 丢失，如果数据提交了，我们是可以不把数据提交到磁盘的，但为了保证持久性，必须 把修改这些页面的redo日志刷新到磁盘。</li><li>后台线程不同的刷新 后台有一个线程，大概每秒都会将log buffer里面的redo日志刷新到硬盘上。</li><li>checkpoint 下下小节讲</li></ul><h5 id="6-3-redo日志文件组"><a href="#6-3-redo日志文件组" class="headerlink" title="6.3 redo日志文件组"></a>6.3 redo日志文件组</h5><p>我们可以通过show variables like ‘datadir’命令找到相关目录，底下有两个文件， 分别是ib_logfile0和ib_logfile1,如下图所示。<br><img src="/2021/9527202101-07%2021:45:05/11.png" alt title="点击放大"><br><img src="/2021/9527202101-07%2021:45:05/12.png" alt title="点击放大"></p><p>我们将缓冲区log buffer里面的redo日志刷新到这个两个文件里面，他们写入的方式 是循环写入的，先写ib_logfile0,再写ib_logfile1,等ib_logfile1写满了，再写ib_logfile0。 那这样就会存在一个问题，如果ib_logfile1写满了，再写ib_logfile0，之前ib_logfile0的内容 不就被覆盖而丢失了吗？ 这就是checkpoint的工作啦。</p><h5 id="6-4-checkpoint"><a href="#6-4-checkpoint" class="headerlink" title="6.4 checkpoint"></a>6.4 checkpoint</h5><p>redo日志是为了系统崩溃后恢复脏页用的，如果这个脏页可以被刷新到磁盘上，那么 他就可以功成身退，被覆盖也就没事啦。</p><p>冲突补习</p><p>从系统运行开始，就不断的修改页面，会不断的生成redo日志。redo日志是不断 递增的，MySQL为其取了一个名字日志序列号Log Sequence Number，简称lsn。 他的初始化的值为8704，用来记录当前一共生成了多少redo日志。</p><p>redo日志是先写入log buffer，之后才会被刷新到磁盘的redo日志文件。MySQL为其 取了一个名字flush_to_disk_lsn。用来说明缓存区中有多少的脏页数据被刷新到磁盘上啦。 他的初始值和lsn一样，后面的差距就有了。</p><p>做一次checkpoint分为两步</p><ul><li>计算当前系统可以被覆盖的redo日志对应的lsn最大值是多少。redo日志可以被覆盖， 意味着他对应的脏页被刷新到磁盘上，只要我们计算出当前系统中最早被修改的oldest_modification, 只要系统中lsn小于该节点的oldest_modification值磁盘的redo日志都是可以被覆盖的。</li><li>将lsn过程中的一些数据统计。</li></ul><h4 id="7-undo日志（这部分不是很明白，所以大概说了）"><a href="#7-undo日志（这部分不是很明白，所以大概说了）" class="headerlink" title="7. undo日志（这部分不是很明白，所以大概说了）"></a>7. undo日志（这部分不是很明白，所以大概说了）</h4><h5 id="7-1-基本概念"><a href="#7-1-基本概念" class="headerlink" title="7.1 基本概念"></a>7.1 基本概念</h5><p>undo log有两个作用：提供回滚和多个行版本控制(MVCC)。</p><p>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。</p><p>举个例子:</p><p>insert into a(id) values(1);(redo)<br>这条记录是需要回滚的。<br>回滚的语句是delete from a where id = 1;(undo)</p><p>试想想看。如果没有做insert into a(id) values(1);(redo)<br>那么delete from a where id = 1;(undo)这句话就没有意义了。</p><p>现在看下正确的恢复:<br>先insert into a(id) values(1);(redo)<br>然后delete from a where id = 1;(undo)<br>系统就回到了原先的状态，没有这条记录了</p><h5 id="7-2-存储方式"><a href="#7-2-存储方式" class="headerlink" title="7.2 存储方式"></a>7.2 存储方式</h5><p>是存在段之中。</p><h4 id="8-事务"><a href="#8-事务" class="headerlink" title="8. 事务"></a>8. 事务</h4><h5 id="8-1-引言"><a href="#8-1-引言" class="headerlink" title="8.1 引言"></a>8.1 引言</h5><p>事务中有一个隔离性特征，理论上在某个事务对某个数据进行访问时，其他事务应该排序，当该事务提交之后，其他事务才能继续访问这个数据。</p><p>但是这样子对性能影响太大，我们既想保持事务的隔离性，又想让服务器在出来多个事务时性能尽量高些，所以只能舍弃一部分隔离性而去性能。</p><h5 id="8-2-事务并发执行的问题"><a href="#8-2-事务并发执行的问题" class="headerlink" title="8.2 事务并发执行的问题"></a>8.2 事务并发执行的问题</h5><ul><li>脏写（这个太严重了，任何隔离级别都不允许发生）<br>sessionA：修改了一条数据，回滚掉</li></ul><p>sessionB：修改了同一条数据，提交掉</p><p>对于sessionB来说，明明数据更新了也提交了事务，不能说自己啥都没干</p><ul><li>脏读：一个事务读到另一个未提交事务修改的数据<br>session A：查询，得到某条数据</li></ul><p>session B：修改某条数据，但是最后回滚掉啦</p><p>session A：在sessionB修改某条数据之后，在回滚之前，读取了该条记录</p><p>对于session A来说，读到了session回滚之前的脏数据</p><ul><li><p>不可重复读：前后多次读取，同一个数据内容不一样<br>session A：查询某条记录<br>session B : 修改该条记录，并提交事务<br>session A : 再次查询该条记录，发现前后查询不一致</p></li><li><p>幻读：前后多次读取，数据总量不一致<br>session A：查询表内所有记录<br>session B : 新增一条记录，并查询表内所有记录<br>session A : 再次查询该条记录，发现前后查询不一致</p></li></ul><h5 id="8-3-四种隔离级别"><a href="#8-3-四种隔离级别" class="headerlink" title="8.3 四种隔离级别"></a>8.3 四种隔离级别</h5><p>数据库都有的四种隔离级别，MySQL事务默认的隔离级别是可重复读，而且MySQL可以解决了幻读的问题。</p><ul><li>未提交读：脏读，不可重复读，幻读都有可能发生</li><li>已提交读：不可重复读，幻读可能发生</li><li>可重复读：幻读可能发生</li><li>可串行化：都不可能发生<br>但凡事没有百分百，emmmm，其实MySQL并没有百分之百解决幻读的问题。<br><img src="/2021/9527202101-07%2021:45:05/13.gif" alt title="点击放大"></li></ul><p>举个例子：</p><p>session A：查询某条不存在的记录。</p><p>session B：新增该条不存在的记录，并提交事务。</p><p>session A：再次查询该条不存在的记录，是查询不出来的，但是如果我尝试修改该条记录，并提交，其实他是可以修改成功的。</p><h5 id="8-4-MVCC"><a href="#8-4-MVCC" class="headerlink" title="8.4 MVCC"></a>8.4 MVCC</h5><p>版本链：对于该记录的每次更新，都会将值放在一条undo日志中，算是该记录的一个旧版本，随着更新次数的增多，所有版本都会被roll_pointer属性连接成一个链表，即为版本链。</p><p>readview：</p><ul><li>未提交读：因为可以读到未提交事务修改的记录，所以可以直接读取记录的最新版本就行</li><li>已提交读：每次读取之前都生成一个readview</li><li>可重复读：只有在第一次读取的时候才生成readview</li><li>可串行化：InnoDB涉及了加锁的方式来访问记录</li></ul><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6779129204651852299/" target="_blank" rel="noopener">追逐仰望星空</a>头条，原文连接点<a href="https://www.toutiao.com/i6779129204651852299/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-开局一张图&quot;&gt;&lt;a href=&quot;#1-开局一张图&quot; class=&quot;headerlink&quot; title=&quot;1. 开局一张图&quot;&gt;&lt;/a&gt;1. 开局一张图&lt;/h4&gt;&lt;p&gt;这张图是重点！！！咱要先对MySQL有一个宏观的了解，知道他的执行流程。&lt;/p&gt;
&lt;p&gt;一条SQ
      
    
    </summary>
    
    
      <category term="MYSQL" scheme="http://huermosi.xyz/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://huermosi.xyz/tags/MYSQL/"/>
    
      <category term="索引" scheme="http://huermosi.xyz/tags/%E7%B4%A2%E5%BC%95/"/>
    
      <category term="EXPLAIN" scheme="http://huermosi.xyz/tags/EXPLAIN/"/>
    
      <category term="REDO" scheme="http://huermosi.xyz/tags/REDO/"/>
    
      <category term="事务" scheme="http://huermosi.xyz/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>面试官：你是如何评估一个线程池需要设置多少个线程</title>
    <link href="http://huermosi.xyz/2020/952720210401151900/"/>
    <id>http://huermosi.xyz/2020/952720210401151900/</id>
    <published>2020-05-11T07:18:33.000Z</published>
    <updated>2021-04-08T08:49:31.628Z</updated>
    
    <content type="html"><![CDATA[<p>Java并发编程是大厂第一轮面试中的高频面试题，而线程池又是其中的典型代表，本文将梳理关于线程池的工作机制，并提出灵魂之问：你对线程池的工作机制这么了解，<strong>那你在工作中是如何判断一个线程池需要创建多少个线程的呢？</strong></p><h4 id="1-线程池基本工作原理与面试指南"><a href="#1-线程池基本工作原理与面试指南" class="headerlink" title="1. 线程池基本工作原理与面试指南"></a>1. 线程池基本工作原理与面试指南</h4><h5 id="1-1-Java线程池的核心属性"><a href="#1-1-Java线程池的核心属性" class="headerlink" title="1.1 Java线程池的核心属性"></a>1.1 Java线程池的核心属性</h5><p>JAVA 线程池的核心属性如下：</p><ul><li>int corePoolSize<br>核心线程数</li><li>int maximumPoolSize<br>线程池最大线程数</li><li>long keepAliveTime<br>线程保持活跃的时间</li><li>TimeUnit unit<br>keepAliveTime 的时间单位</li><li>BlockingQueue&lt; Runnable &gt; workQueue<br>任务挤压队列</li><li>ThreadFactory threadFactory<br>线程创建工厂类</li><li>RejectedExecutionHandler handler<br>拒绝策略</li></ul><h5 id="1-2-向线程池提交任务时线程创建过程"><a href="#1-2-向线程池提交任务时线程创建过程" class="headerlink" title="1.2 向线程池提交任务时线程创建过程"></a>1.2 向线程池提交任务时线程创建过程</h5><p>那当用户向线程池提交一个任务的时候，线程池会如何创建线程呢？</p><ol><li>首先线程池会判断当前已创建的线程是否小于 corePoolSize (核心线程数)，如果小于，则无论已创建的线程是否空闲，<strong>都会选择创建一个新的线程来执行该任务，直到已创建的线程等于核心线程数。</strong></li><li>当线程池中已创建的线程数等于核心核心线程数时，用户继续向线程池提交任务时，此时会先判断任务队列是否已满：<br>1）如果任务队列未满，则将任务放入队列中。2）如果任务队列已满，则判断当前线程数量是否超过了最大线程数量，如果未超过，则创建一个新的线程来执行该任务，如果线程池已创建的线程数量等最大线程数，则执行拒绝策略。<blockquote><p>温馨提示：所以如果线程池使用的队列无界队列，最大线程数会变得没有意义。</p></blockquote></li></ol><h5 id="1-3-线程池的拒绝策略、使用场景"><a href="#1-3-线程池的拒绝策略、使用场景" class="headerlink" title="1.3 线程池的拒绝策略、使用场景"></a>1.3 线程池的拒绝策略、使用场景</h5><p>JUC 默认提供了如下拒绝策略：</p><ul><li>AbortPolicy<br>拒绝，直接抛出 RejectedExecutionException，默认值。</li><li>CallerRunsPolicy<br>由调用线程直接运行任务的 run 方法，即异步转同步。</li><li>DiscardOldestPolicy<br>丢弃任务队列中最先进入的任务。</li><li>DiscardPolicy<br>拒绝了，就不执行，“当没事人事”样。</li></ul><p>拒绝策略触发的条件：线程池使用的是有界任务队列时，才有可能被触发，当队列已满，并且线程池创建的线程已经达到了最大允许的线程池时。</p><p>默认情况下，通常使用 AbortPolicy 即可。</p><p>CallerRunsPolicy 异步转同步在出现拒绝的情况下其实意义不大，没有想出其合适的场景，因为需要执行拒绝策略的时候，已经处理变慢了，再同步执行任务，只会增加服务器的负载，不利于恢复问题。</p><p>DiscardOldestPolicy 这种策略，通常用于类似记录轨迹，偶尔丢失点数据没关系，但希望最新的数据能得到保存。</p><p>DiscardPolicy 策略，通常用来异步打印日志，直接忽略不执行，期望保存旧的数据。</p><h5 id="1-4-如何选择阻塞队列"><a href="#1-4-如何选择阻塞队列" class="headerlink" title="1.4 如何选择阻塞队列"></a>1.4 如何选择阻塞队列</h5><p><strong>阿里内部的开源规范明确禁止使用无界队列</strong>，如果使用无界队列，任务会不受限制的往线程池中提交，有可能造成内存溢出。</p><p>如果使用无界队列，<strong>最大线程数</strong>这个参数将会<strong>失效</strong>，因为永远也不会创建多于核心线程数量的线程。</p><h5 id="1-5-线程池工厂有何实际用处"><a href="#1-5-线程池工厂有何实际用处" class="headerlink" title="1.5 线程池工厂有何实际用处"></a>1.5 线程池工厂有何实际用处</h5><p>ThreadFactory threadFactory，线程池工厂，在使用线程池时，强烈推荐使用自己定义的线程工厂，<strong>这样能为线程池中的线程进行命名</strong>，方便跟大家使用 jsatck 命令查看线程栈时，能快速识别对应的线程。</p><h5 id="1-6-keepAliveTime参数的作用"><a href="#1-6-keepAliveTime参数的作用" class="headerlink" title="1.6 keepAliveTime参数的作用"></a>1.6 keepAliveTime参数的作用</h5><p>keepAliveTime ：通俗点来说，这个参数表示线程的最大空闲时间，即如果线程没有在执行任务，能存活的时间。</p><p><strong>默认情况下，该参数只针对超过核心线程数(corePoolSize) 的线程</strong>,可通过将allowCoreThreadTimeOut设置为true，则核心线程数也会因为空闲而被关闭。</p><h4 id="2-如何为一个线程池设置合适的线程数量"><a href="#2-如何为一个线程池设置合适的线程数量" class="headerlink" title="2. 如何为一个线程池设置合适的线程数量"></a>2. 如何为一个线程池设置合适的线程数量</h4><p>目前根据我看过的一些开源框架，设置多少个线程数量通常是根据应用的类型：IO密集型、CPU密集型。</p><ul><li>IO密集型通常设置为2n+1，其中n为CPU核数</li><li>CPU密集型通常设置为 n+1。<br>实际情况往往复杂得多，并不会按照这个进行设置，上面的公司通常适合框架设置IO线程的个数，例如netty,dubbo这种底层通讯框架通常会参考上述标准进行设置。</li></ul><p>关于在实际业务开发中，如何为一个线程池设置合适的线程呢？</p><p>其实对于IO密集型类型的应用，网上还有一个公式：线程数 = CPU核心数/(1-阻塞系数)</p><p>引入了阻塞系数的概念，一般为0.8~0.9之间，</p><p>在我们的业务开发中，基本上都是IO密集型，因为往往都会去操作数据库，访问redis，es等存储型组件，都会涉及到磁盘IO，网络IO。</p><p>那什么场景下是CPU密集型呢？纯计算类，例如计算圆周率的位数，当然我们基本接触不到。</p><p><strong>IO密集型，可以考虑多设置一些线程，主要目的是可以增加IO的并发度，CPU密集型不宜设置过多线程，因为是会造成线程切换，反而损耗性能。</strong></p><p><strong>接下来我们以一个实际的场景来说明如何设置线程数量。</strong></p><p>一个4C8G的机器上部署了一个MQ消费者，在RocketMQ的实现中，消费端也是用一个线程池来消费线程的，那这个线程数要怎么设置呢？</p><p>如果按照 2n + 1 的公式，线程数设置为 9个，但在我们实践过程中发现如果增大线程数量，会显著提高消息的处理能力，说明 2n + 1 对于业务场景来说，并不太合适。</p><p><strong>如果套用 线程数 = CPU核心数/(1-阻塞系数) 阻塞系数取 0.8 ，线程数为 20 。阻塞系数取 0.9，大概线程数40，20个线程数我觉得可以。</strong></p><p>如果我们发现数据库的操作耗时比较多，此时可以继续提高阻塞系数，从而增大线程数量。</p><p><strong>那我们怎么判断需要增加更多线程呢？</strong>可以用jstack命令查看一下进程的线程栈，<strong>如果发现线程池中大部分线程都处于等待获取任务，则说明线程够用，</strong>如下图所示：<br><img src="/2020/952720210401151900/1.png" alt="线程栈" title="点击放大"><br>如果大部分线程都处于运行状态，可以继续适当调高线程数量。</p><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6944506489440616973/" target="_blank" rel="noopener">中间件兴趣圈</a>头条，原文连接点<a href="https://www.toutiao.com/i6944506489440616973/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java并发编程是大厂第一轮面试中的高频面试题，而线程池又是其中的典型代表，本文将梳理关于线程池的工作机制，并提出灵魂之问：你对线程池的工作机制这么了解，&lt;strong&gt;那你在工作中是如何判断一个线程池需要创建多少个线程的呢？&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://huermosi.xyz/categories/JAVA/"/>
    
      <category term="多线程" scheme="http://huermosi.xyz/categories/JAVA/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="JAVA" scheme="http://huermosi.xyz/tags/JAVA/"/>
    
      <category term="THREAD" scheme="http://huermosi.xyz/tags/THREAD/"/>
    
      <category term="线程" scheme="http://huermosi.xyz/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程池" scheme="http://huermosi.xyz/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>都前后端分离了，咱就别做页面跳转了！统统 JSON 交互</title>
    <link href="http://huermosi.xyz/2020/9527218880001/"/>
    <id>http://huermosi.xyz/2020/9527218880001/</id>
    <published>2020-04-02T08:58:01.000Z</published>
    <updated>2021-04-08T09:08:55.592Z</updated>
    
    <content type="html"><![CDATA[<p>前两天有个小伙伴在微信上问松哥，这前后端分离开发后，认证这一块到底是使用传统的 session 还是使用像 JWT 这样的 token 来解决呢？</p><p>这确实代表了两种不同的方向。</p><p>传统的通过 session 来记录用户认证信息的方式我们可以理解为这是一种有状态登录，而 JWT 则代表了一种无状态登录。可能有小伙伴对这个概念还不太熟悉，我这里就先来科普一下有状态登录和无状态登录。</p><h4 id="1-无状态登录"><a href="#1-无状态登录" class="headerlink" title="1. 无状态登录"></a>1. 无状态登录</h4><h5 id="1-1-什么是有状态"><a href="#1-1-什么是有状态" class="headerlink" title="1.1 什么是有状态"></a>1.1 什么是有状态</h5><p>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如 Tomcat 中的 Session。例如登录：用户登录后，我们把用户的信息保存在服务端 session 中，并且给用户一个 cookie 值，记录对应的 session，然后下次请求，用户携带 cookie 值来（这一步有浏览器自动完成），我们就能识别到对应 session，从而找到用户的信息。这种方式目前来看最方便，但是也有一些缺陷，如下：</p><ul><li>服务端保存大量数据，增加服务端压力</li><li>服务端保存用户状态，不支持集群化部署</li></ul><h5 id="1-2-什么是无状态"><a href="#1-2-什么是无状态" class="headerlink" title="1.2 什么是无状态"></a>1.2 什么是无状态</h5><p>微服务集群中的每个服务，对外提供的都使用 RESTful 风格的接口。而 RESTful 风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li>服务端不保存任何客户端请求者信息</li><li>客户端的每次请求必须具备自描述信息，通过这些信息识别客户端身份</li></ul><p>那么这种无状态性有哪些好处呢？</p><ul><li>客户端请求不依赖服务端的信息，多次请求不需要必须访问到同一台服务器</li><li>服务端的集群和状态对客户端透明</li><li>服务端可以任意的迁移和伸缩（可以方便的进行集群化部署）</li><li>减小服务端存储压力</li></ul><h5 id="1-3-如何实现无状态"><a href="#1-3-如何实现无状态" class="headerlink" title="1.3 如何实现无状态"></a>1.3 如何实现无状态</h5><p>无状态登录的流程：</p><ul><li>首先客户端发送账户名/密码到服务端进行认证</li><li>认证通过后，服务端将用户信息加密并且编码成一个 token，返回给客户端</li><li>以后客户端每次发送请求，都需要携带认证的 token</li><li>服务端对客户端发送来的 token 进行解密，判断是否有效，并且获取用户登录信息</li></ul><h5 id="1-4-各自优缺点"><a href="#1-4-各自优缺点" class="headerlink" title="1.4 各自优缺点"></a>1.4 各自优缺点</h5><p>使用 session 最大的优点在于方便。你不用做过多的处理，一切都是默认的即可。松哥本系列前面几篇文章我们也都是基于 session 来讲的。</p><p>但是使用 session 有另外一个致命的问题就是如果你的前端是 Android、iOS、小程序等，这些 App 天然的就没有 cookie，如果非要用 session，就需要这些工程师在各自的设备上做适配，一般是模拟 cookie，从这个角度来说，在移动 App 遍地开花的今天，我们单纯的依赖 session 来做安全管理，似乎也不是特别理想。</p><p>这个时候 JWT 这样的无状态登录就展示出自己的优势了，这些登录方式所依赖的 token 你可以通过普通参数传递，也可以通过请求头传递，怎么样都行，具有很强的灵活性。</p><p>不过话说回来，如果你的前后端分离只是网页+服务端，其实没必要上无状态登录，基于 session 来做就可以了，省事又方便。</p><p>好了，说了这么多，本文我还是先来和大家说说基于 session 的认证，关于 JWT 的登录以后我会和大家细说，如果小伙伴们等不及，也可以先看看松哥之前发的关于 JWT 的教程：Spring Security 结合 Jwt 实现无状态登录。</p><h4 id="2-登录交互"><a href="#2-登录交互" class="headerlink" title="2. 登录交互"></a>2. 登录交互</h4><p>在上篇文章中，松哥和大家捋了常见的登录参数配置问题，对于登录成功和登录失败，我们还遗留了一个回调函数没有讲，这篇文章就来和大家细聊一下。</p><h5 id="2-1-前后端分离的数据交互"><a href="#2-1-前后端分离的数据交互" class="headerlink" title="2.1 前后端分离的数据交互"></a>2.1 前后端分离的数据交互</h5><p>在前后端分离这样的开发架构下，前后端的交互都是通过 JSON 来进行，无论登录成功还是失败，都不会有什么服务端跳转或者客户端跳转之类。</p><p>登录成功了，服务端就返回一段登录成功的提示 JSON 给前端，前端收到之后，该跳转该展示，由前端自己决定，就和后端没有关系了。</p><p>登录失败了，服务端就返回一段登录失败的提示 JSON 给前端，前端收到之后，该跳转该展示，由前端自己决定，也和后端没有关系了。</p><p>首先把这样的思路确定了，基于这样的思路，我们来看一下登录配置。</p><h5 id="2-2-登录成功"><a href="#2-2-登录成功" class="headerlink" title="2.2 登录成功"></a>2.2 登录成功</h5><p>之前我们配置登录成功的处理是通过如下两个方法来配置的：</p><ul><li>defaultSuccessUrl</li><li>successForwardUrl<br>这两个都是配置跳转地址的，适用于前后端不分的开发。除了这两个方法之外，还有一个必杀技，那就是 successHandler。</li></ul><p>successHandler 的功能十分强大，甚至已经囊括了 defaultSuccessUrl 和 successForwardUrl 的功能。我们来看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.successHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">    Object principal = authentication.getPrincipal();</span><br><span class="line">    resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>successHandler 方法的参数是一个<br>AuthenticationSuccessHandler 对象，这个对象中我们要实现的方法是 onAuthenticationSuccess。</p><p>onAuthenticationSuccess 方法有三个参数，分别是：</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>Authentication<br>有了前两个参数，我们就可以在这里随心所欲的返回数据了。利用 HttpServletRequest 我们可以做服务端跳转，利用 HttpServletResponse 我们可以做客户端跳转，当然，也可以返回 JSON 数据。</li></ul><p>第三个 Authentication 参数则保存了我们刚刚登录成功的用户信息。</p><p>配置完成后，我们再去登录，就可以看到登录成功的用户信息通过 JSON 返回到前端了，如下：<br><img src="/2020/9527218880001/1.png" alt title="点击放大"></p><p>当然用户的密码已经被擦除掉了。擦除密码的问题，松哥之前和大家分享过，大家可以参考这篇文章：手把手带你捋一遍 Spring Security 登录流程</p><h5 id="2-3-登录失败"><a href="#2-3-登录失败" class="headerlink" title="2.3 登录失败"></a>2.3 登录失败</h5><p>登录失败也有一个类似的回调，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.failureHandler((req, resp, e) -&gt; &#123;</span><br><span class="line">    resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(e.getMessage());</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>失败的回调也是三个参数，前两个就不用说了，第三个是一个 Exception，对于登录失败，会有不同的原因，Exception 中则保存了登录失败的原因，我们可以将之通过 JSON 返回到前端。</p><p>当然大家也看到，在微人事中，我还挨个去识别了一下异常的类型，根据不同的异常类型，我们可以给用户一个更加明确的提示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">PrintWriter out = resp.getWriter();</span><br><span class="line">RespBean respBean = RespBean.error(e.getMessage());</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> LockedException) &#123;</span><br><span class="line">    respBean.setMsg(<span class="string">"账户被锁定，请联系管理员!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CredentialsExpiredException) &#123;</span><br><span class="line">    respBean.setMsg(<span class="string">"密码过期，请联系管理员!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccountExpiredException) &#123;</span><br><span class="line">    respBean.setMsg(<span class="string">"账户过期，请联系管理员!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DisabledException) &#123;</span><br><span class="line">    respBean.setMsg(<span class="string">"账户被禁用，请联系管理员!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">    respBean.setMsg(<span class="string">"用户名或者密码输入错误，请重新输入!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(respBean));</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><p>这里有一个需要注意的点。</p><p>我们知道，当用户登录时，用户名或者密码输入错误，我们一般只给一个模糊的提示，即「用户名或者密码输入错误，请重新输入」，而不会给一个明确的诸如“用户名输入错误”或“密码输入错误”这样精确的提示，但是对于很多不懂行的新手小伙伴，他可能就会给一个明确的错误提示，这会给系统带来风险。</p><p>但是使用了 Spring Security 这样的安全管理框架之后，即使你是一个新手，也不会犯这样的错误。</p><p>在 Spring Security 中，用户名查找失败对应的异常是：</p><ul><li><p>UsernameNotFoundException<br>密码匹配失败对应的异常是：</p></li><li><p>BadCredentialsException<br>但是我们在登录失败的回调中，却总是看不到 UsernameNotFoundException 异常，无论用户名还是密码输入错误，抛出的异常都是 BadCredentialsException。</p></li></ul><p>这是为什么呢？松哥在之前的文章手把手带你捋一遍 Spring Security 登录流程中介绍过，在登录中有一个关键的步骤，就是去加载用户数据，我们再来把这个方法拎出来看一下（部分）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">user = retrieveUser(username,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UsernameNotFoundException notFound) &#123;</span><br><span class="line">logger.debug(<span class="string">"User '"</span> + username + <span class="string">"' not found"</span>);</span><br><span class="line"><span class="keyword">if</span> (hideUserNotFoundExceptions) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(messages.getMessage(</span><br><span class="line"><span class="string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>,</span><br><span class="line"><span class="string">"Bad credentials"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> notFound;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这段代码中，我们看出，在查找用户时，如果抛出了 UsernameNotFoundException，这个异常会被捕获，捕获之后，如果<br>hideUserNotFoundExceptions 属性的值为 true，就抛出一个 BadCredentialsException。相当于将 UsernameNotFoundException 异常隐藏了，而默认情况下，hideUserNotFoundExceptions 的值就为 true。</p><p>看到这里大家就明白了为什么无论用户还是密码写错，你收到的都是 BadCredentialsException 异常。</p><p>一般来说这个配置是不需要修改的，如果你一定要区别出来 UsernameNotFoundException 和 BadCredentialsException，我这里给大家提供三种思路：</p><ol><li>自己定义 DaoAuthenticationProvider 代替系统默认的，在定义时将 hideUserNotFoundExceptions 属性设置为 false。</li><li>当用户名查找失败时，不抛出 UsernameNotFoundException 异常，而是抛出一个自定义异常，这样自定义异常就不会被隐藏，进而在登录失败的回调中根据自定义异常信息给前端用户一个提示。</li><li>当用户名查找失败时，直接抛出 BadCredentialsException，但是异常信息为 “用户名不存在”。<br>三种思路仅供小伙伴们参考，除非情况特殊，一般不用修改这一块的默认行为。</li></ol><p>官方这样做的好处是什么呢？很明显可以强迫开发者给一个模糊的异常提示，这样即使是不懂行的新手，也不会将系统置于危险之中。</p><p>好了，这样配置完成后，无论是登录成功还是失败，后端都将只返回 JSON 给前端了。</p><h4 id="3-未认证处理方案"><a href="#3-未认证处理方案" class="headerlink" title="3. 未认证处理方案"></a>3. 未认证处理方案</h4><p>那未认证又怎么办呢？</p><p>有小伙伴说，那还不简单，没有认证就访问数据，直接重定向到登录页面就行了，这没错，系统默认的行为也是这样。</p><p>但是在前后端分离中，这个逻辑明显是有问题的，如果用户没有登录就访问一个需要认证后才能访问的页面，这个时候，我们不应该让用户重定向到登录页面，而是给用户一个尚未登录的提示，前端收到提示之后，再自行决定页面跳转。</p><p>要解决这个问题，就涉及到 Spring Security 中的一个接口 AuthenticationEntryPoint ，该接口有一个实现类：<br>LoginUrlAuthenticationEntryPoint ，该类中有一个方法 commence，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs the redirect (or forward) to the login form URL.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">AuthenticationException authException)</span> </span>&#123;</span><br><span class="line">String redirectUrl = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (useForward) &#123;</span><br><span class="line"><span class="keyword">if</span> (forceHttps &amp;&amp; <span class="string">"http"</span>.equals(request.getScheme())) &#123;</span><br><span class="line">redirectUrl = buildHttpsRedirectUrlForRequest(request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (redirectUrl == <span class="keyword">null</span>) &#123;</span><br><span class="line">String loginForm = determineUrlToUseForThisRequest(request, response,</span><br><span class="line">authException);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Server side forward to: "</span> + loginForm);</span><br><span class="line">&#125;</span><br><span class="line">RequestDispatcher dispatcher = request.getRequestDispatcher(loginForm);</span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">redirectUrl = buildRedirectUrlToLoginPage(request, response, authException);</span><br><span class="line">&#125;</span><br><span class="line">redirectStrategy.sendRedirect(request, response, redirectUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们从这个方法的注释中就可以看出，这个方法是用来决定到底是要重定向还是要 forward，通过 Debug 追踪，我们发现默认情况下 useForward 的值为 false，所以请求走进了重定向。</p><p>那么我们解决问题的思路很简单，直接重写这个方法，在方法中返回 JSON 即可，不再做重定向操作，具体配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.csrf().disable().exceptionHandling()</span><br><span class="line">.authenticationEntryPoint((req, resp, authException) -&gt; &#123;</span><br><span class="line">            resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            PrintWriter out = resp.getWriter();</span><br><span class="line">            out.write(<span class="string">"尚未登录，请先登录"</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在 Spring Security 的配置中加上自定义的 AuthenticationEntryPoint 处理方法，该方法中直接返回相应的 JSON 提示即可。这样，如果用户再去直接访问一个需要认证之后才可以访问的请求，就不会发生重定向操作了，服务端会直接给浏览器一个 JSON 提示，浏览器收到 JSON 之后，该干嘛干嘛。</p><h4 id="4-注销登录"><a href="#4-注销登录" class="headerlink" title="4. 注销登录"></a>4. 注销登录</h4><p>最后我们再来看看注销登录的处理方案。</p><p>注销登录我们前面说过，按照前面的配置，注销登录之后，系统自动跳转到登录页面，这也是不合适的，如果是前后端分离项目，注销登录成功后返回 JSON 即可，配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.logout()</span><br><span class="line">.logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">.logoutSuccessHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">    resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(<span class="string">"注销成功"</span>);</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><p>这样，注销成功之后，前端收到的也是 JSON 了：<br><img src="/2020/9527218880001/2.png" alt title="点击放大"></p><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6810916881206084100/" target="_blank" rel="noopener">江南一点雨</a>头条，原文连接点<a href="https://www.toutiao.com/i6810916881206084100/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前两天有个小伙伴在微信上问松哥，这前后端分离开发后，认证这一块到底是使用传统的 session 还是使用像 JWT 这样的 token 来解决呢？&lt;/p&gt;
&lt;p&gt;这确实代表了两种不同的方向。&lt;/p&gt;
&lt;p&gt;传统的通过 session 来记录用户认证信息的方式我们可以理解为这
      
    
    </summary>
    
    
      <category term="SPRING" scheme="http://huermosi.xyz/categories/SPRING/"/>
    
      <category term="SPRING SECURITY" scheme="http://huermosi.xyz/categories/SPRING/SPRING-SECURITY/"/>
    
    
      <category term="SPRING" scheme="http://huermosi.xyz/tags/SPRING/"/>
    
      <category term="SPRING SECURITY" scheme="http://huermosi.xyz/tags/SPRING-SECURITY/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ如何防止数据丢失</title>
    <link href="http://huermosi.xyz/2020/952720210401193500/"/>
    <id>http://huermosi.xyz/2020/952720210401193500/</id>
    <published>2020-04-01T11:35:24.000Z</published>
    <updated>2021-04-08T08:49:31.707Z</updated>
    
    <content type="html"><![CDATA[<h4 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h4><p><img src="/2020/952720210401193500/1.png" alt title="点击放大"></p><h4 id="2-分析数据丢失的原因"><a href="#2-分析数据丢失的原因" class="headerlink" title="2. 分析数据丢失的原因"></a>2. 分析数据丢失的原因</h4><p>分析RabbitMQ消息丢失的情况，不妨先看看一条消息从生产者发送到消费者消费的过程：<br><img src="/2020/952720210401193500/2.jpg" alt title="点击放大"><br>可以看出，一条消息整个过程要经历两次的网络传输：<strong>从生产者发送到RabbitMQ服务器，从RabbitMQ服务器发送到消费者。</strong><br><strong>在消费者未消费前存储在队列(Queue)中。</strong></p><p>所以可以知道，有三个场景下是会发生消息丢失的：</p><ul><li>存储在队列中，如果队列没有对消息持久化，RabbitMQ服务器宕机重启会丢失数据。</li><li>生产者发送消息到RabbitMQ服务器过程中，RabbitMQ服务器如果宕机停止服务，消息会丢失。</li><li>消费者从RabbitMQ服务器获取队列中存储的数据消费，但是消费者程序出错或者宕机而没有正确消费，导致数据丢失。</li></ul><p>针对以上三种场景，RabbitMQ提供了三种解决的方式，分别是消息持久化，confirm机制，ACK事务机制。<br><img src="/2020/952720210401193500/3.jpg" alt title="点击放大"></p><h4 id="3-消息持久化"><a href="#3-消息持久化" class="headerlink" title="3. 消息持久化"></a>3. 消息持久化</h4><p>RabbitMQ是支持消息持久化的，消息持久化需要设置：Exchange为持久化和Queue持久化，这样当消息发送到RabbitMQ服务器时，消息就会持久化。<br>首先看Exchange交换机的类图：<br><img src="/2020/952720210401193500/4.jpg" alt title="点击放大"></p><p>看这个类图其实是要说明上一篇文章介绍的四种交换机都是AbstractExchange抽象类的子类，所以根据java的特性，创建子类的实例会先调用父类的构造器，父类也就是AbstractExchange的构造器是怎么样的呢？<br><img src="/2020/952720210401193500/5.png" alt title="点击放大"></p><p>从上面的注释可以看到durable参数表示是否持久化。默认是持久化(true)。创建持久化的Exchange可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">rabbitmqDemoDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//Direct交换机</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(RabbitMQConfig.RABBITMQ_DEMO_DIRECT_EXCHANGE, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是Queue队列，我们先看看Queue的构造器是怎么样的：<br><img src="/2020/952720210401193500/6.png" alt title="点击放大"></p><p>也是通过durable参数设置是否持久化，默认是true。所以创建时可以不指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">fanoutExchangeQueueA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//只需要指定名称，默认是持久化的</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(RabbitMQConfig.FANOUT_EXCHANGE_QUEUE_TOPIC_A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就完成了消息持久化的设置，接下来启动项目，发送几条消息，我们可以看到：<br><img src="/2020/952720210401193500/7.png" alt title="点击放大"></p><p>怎么证明是已经持久化了呢，实际上可以找到对应的文件：<br><img src="/2020/952720210401193500/8.png" alt title="点击放大"></p><p>找到对应磁盘中的目录：<br><img src="/2020/952720210401193500/9.jpg" alt title="点击放大"><br>消息持久化可以防止消息在RabbitMQ Server中不会因为宕机重启而丢失。</p><h4 id="3-消息确认机制"><a href="#3-消息确认机制" class="headerlink" title="3. 消息确认机制"></a>3. 消息确认机制</h4><h5 id="3-1-confirm机制"><a href="#3-1-confirm机制" class="headerlink" title="3.1 confirm机制"></a>3.1 confirm机制</h5><p>在生产者发送到RabbitMQ Server时有可能因为网络问题导致投递失败，从而丢失数据。我们可以使用confirm模式防止数据丢失。工作流程是怎么样的呢，看以下图解：<br><img src="/2020/952720210401193500/10.jpg" alt title="点击放大"></p><p>从上图中可以看到是通过两个回调函数<strong>confirm()、returnedMessage()</strong>进行通知。</p><p>一条消息从生产者发送到RabbitMQ，首先会发送到Exchange，对应回调函数confirm()。第二步从Exchange路由分配到Queue中，对应回调函数则是returnedMessage()。</p><p>代码怎么实现呢，请看演示：</p><p>首先在application.yml配置文件中加上如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#    publisher-returns: true</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># publisher-confirms：设置为true时。当消息投递到Exchange后，会回调confirm()方法进行通知生产者</span></span><br><span class="line"><span class="comment"># publisher-returns：设置为true时。当消息匹配到Queue并且失败时，会通过回调returnedMessage()方法返回消息</span></span><br><span class="line"><span class="comment"># spring.rabbitmq.template.mandatory: 设置为true时。指定消息在没有被队列接收时会通过回调returnedMessage()方法退回。</span></span><br></pre></td></tr></table></figure><p>有个小细节，publisher-returns和mandatory如果都设置的话，优先级是以mandatory优先。可以看源码：<br><img src="/2020/952720210401193500/11.jpg" alt title="点击放大"></p><p>接着我们需要定义回调方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfirmCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span>, <span class="title">RabbitTemplate</span>.<span class="title">ReturnCallback</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(RabbitmqConfirmCallback<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听消息是否到达Exchange</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> correlationData 包含消息的唯一标识的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ack             true 标识 ack，false 标识 nack</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause           nack 投递失败的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            logger.info(<span class="string">"消息投递成功~消息Id：&#123;&#125;"</span>, correlationData.getId());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.error(<span class="string">"消息投递失败，Id：&#123;&#125;，错误提示：&#123;&#125;"</span>, correlationData.getId(), cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"消息没有路由到队列，获得返回的消息"</span>);</span><br><span class="line">        Map map = byteToObject(message.getBody(), Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        logger.info(<span class="string">"message body: &#123;&#125;"</span>, map == <span class="keyword">null</span> ? <span class="string">""</span> : map.toString());</span><br><span class="line">        logger.info(<span class="string">"replyCode: &#123;&#125;"</span>, replyCode);</span><br><span class="line">        logger.info(<span class="string">"replyText: &#123;&#125;"</span>, replyText);</span><br><span class="line">        logger.info(<span class="string">"exchange: &#123;&#125;"</span>, exchange);</span><br><span class="line">        logger.info(<span class="string">"routingKey: &#123;&#125;"</span>, exchange);</span><br><span class="line">        logger.info(<span class="string">"------------&gt; end &lt;------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">byteToObject</span><span class="params">(<span class="keyword">byte</span>[] bytes, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        T t;</span><br><span class="line">        <span class="keyword">try</span> (ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">             ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis)) &#123;</span><br><span class="line">            t = (T) ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里就简单地打印回调方法返回的消息，在实际项目中，可以把返回的消息存储到日志表中，使用定时任务进行进一步的处理。</p><p>我这里是使用RabbitTemplate进行发送，所以在Service层的RabbitTemplate需要设置一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQServiceImpl</span> <span class="keyword">implements</span> <span class="title">RabbitMQService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitmqConfirmCallback rabbitmqConfirmCallback;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定 ConfirmCallback</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(rabbitmqConfirmCallback);</span><br><span class="line">        <span class="comment">//指定 ReturnCallback</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(rabbitmqConfirmCallback);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; message = getMessage(msg);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CorrelationData correlationData = (CorrelationData) message.remove(<span class="string">"correlationData"</span>);</span><br><span class="line">            rabbitTemplate.convertAndSend(RabbitMQConfig.RABBITMQ_DEMO_DIRECT_EXCHANGE, RabbitMQConfig.RABBITMQ_DEMO_DIRECT_ROUTING, message, correlationData);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        String msgId = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>).substring(<span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(msgId);</span><br><span class="line">        String sendTime = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"msgId"</span>, msgId);</span><br><span class="line">        map.put(<span class="string">"sendTime"</span>, sendTime);</span><br><span class="line">        map.put(<span class="string">"msg"</span>, msg);</span><br><span class="line">        map.put(<span class="string">"correlationData"</span>, correlationData);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成！接下来我们进行测试，发送一条消息，我们可以控制台：<br><img src="/2020/952720210401193500/12.png" alt title="点击放大"><br>假设发送一条信息没有路由匹配到队列，可以看到如下信息：<br><img src="/2020/952720210401193500/13.png" alt title="点击放大"><br>这就是confirm模式。它的作用是为了保障生产者投递消息到RabbitMQ不会出现消息丢失。</p><h5 id="3-2-事务机制-ACK"><a href="#3-2-事务机制-ACK" class="headerlink" title="3.2 事务机制(ACK)"></a>3.2 事务机制(ACK)</h5><p>最开始的那张图已经讲过，消费者从队列中获取到消息后，会直接确认签收，假设消费者宕机或者程序出现异常，数据没有正常消费，这种情况就会出现数据丢失。</p><p>所以关键在于把自动签收改成手动签收，正常消费则返回确认签收，如果出现异常，则返回拒绝签收重回队列。<br><img src="/2020/952720210401193500/14.jpg" alt title="点击放大"></p><p>代码怎么实现呢，请看演示：</p><p>首先在消费者的application.yml文件中设置事务提交为manual手动模式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line"><span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 手动ack模式</span></span><br><span class="line">        <span class="attr">concurrency:</span> <span class="number">1</span> <span class="comment"># 最少消费者数量</span></span><br><span class="line">        <span class="attr">max-concurrency:</span> <span class="number">10</span> <span class="comment"># 最大消费者数量</span></span><br></pre></td></tr></table></figure><p>然后编写消费者的监听器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class RabbitDemoConsumer &#123;</span><br><span class="line"></span><br><span class="line">    enum Action &#123;</span><br><span class="line">        &#x2F;&#x2F;处理成功</span><br><span class="line">        SUCCESS,</span><br><span class="line">        &#x2F;&#x2F;可以重试的错误，消息重回队列</span><br><span class="line">        RETRY,</span><br><span class="line">        &#x2F;&#x2F;无需重试的错误，拒绝消息，并从队列中删除</span><br><span class="line">        REJECT</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RabbitHandler</span><br><span class="line">    @RabbitListener(queuesToDeclare &#x3D; @Queue(RabbitMQConfig.RABBITMQ_DEMO_TOPIC))</span><br><span class="line">    public void process(String msg, Message message, Channel channel) &#123;</span><br><span class="line">        long tag &#x3D; message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        Action action &#x3D; Action.SUCCESS;</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;消费者RabbitDemoConsumer从RabbitMQ服务端消费消息：&quot; + msg);</span><br><span class="line">            if (&quot;bad&quot;.equals(msg)) &#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;测试：抛出可重回队列的异常&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (&quot;error&quot;.equals(msg)) &#123;</span><br><span class="line">                throw new Exception(&quot;测试：抛出无需重回队列的异常&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IllegalArgumentException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">            &#x2F;&#x2F;根据异常的类型判断，设置action是可重试的，还是无需重试的</span><br><span class="line">            action &#x3D; Action.RETRY;</span><br><span class="line">        &#125; catch (Exception e2) &#123;</span><br><span class="line">            &#x2F;&#x2F;打印异常</span><br><span class="line">            e2.printStackTrace();</span><br><span class="line">            &#x2F;&#x2F;根据异常的类型判断，设置action是可重试的，还是无需重试的</span><br><span class="line">            action &#x3D; Action.REJECT;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (action &#x3D;&#x3D; Action.SUCCESS) &#123;</span><br><span class="line">                    &#x2F;&#x2F;multiple 表示是否批量处理。true表示批量ack处理小于tag的所有消息。false则处理当前消息</span><br><span class="line">                    channel.basicAck(tag, false);</span><br><span class="line">                &#125; else if (action &#x3D;&#x3D; Action.RETRY) &#123;</span><br><span class="line">                    &#x2F;&#x2F;Nack，拒绝策略，消息重回队列</span><br><span class="line">                    channel.basicNack(tag, false, true);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    &#x2F;&#x2F;Nack，拒绝策略，并且从队列中删除</span><br><span class="line">                    channel.basicNack(tag, false, false);</span><br><span class="line">                &#125;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下上面的代码，如果没有异常，则手动确认回复RabbitMQ服务端basicAck(消费成功)。</p><p>如果抛出某些可以重回队列的异常，我们就回复basicNack并且设置重回队列。</p><p>如果是抛出不可重回队列的异常，就回复basicNack并且设置从RabbitMQ的队列中删除。</p><p>接下来进行测试，发送一条普通的消息”hello”：<br><img src="/2020/952720210401193500/15.jpg" alt title="点击放大"></p><p>解释一下ack返回的三个方法的意思。</p><p>①成功确认</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicAck</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><p>消费者成功处理后调用此方法对消息进行确认。</p><ul><li>deliveryTag：该消息的index</li><li>multiple：是否批量.。true：将一次性ack所有小于deliveryTag的消息。</li></ul><p>②失败确认</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicNack</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple, <span class="keyword">boolean</span> requeue)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><ul><li>deliveryTag：该消息的index。</li><li>multiple：是否批量。true：将一次性拒绝所有小于deliveryTag的消息。</li><li>requeue：被拒绝的是否重新入队列。</li></ul><p>③失败确认</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicReject</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> requeue)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><ul><li>deliveryTag:该消息的index。</li><li>requeue：被拒绝的是否重新入队列。<br>basicNack()和basicReject()的区别在于：basicNack()可以批量拒绝，basicReject()一次只能拒接一条消息。</li></ul><h4 id="4-遇到的坑"><a href="#4-遇到的坑" class="headerlink" title="4. 遇到的坑"></a>4. 遇到的坑</h4><h5 id="4-1-启用nack机制后，导致的死循环"><a href="#4-1-启用nack机制后，导致的死循环" class="headerlink" title="4.1 启用nack机制后，导致的死循环"></a>4.1 启用nack机制后，导致的死循环</h5><p>上面的代码我故意写了一个bug。测试发送一条”bad”，然后会抛出重回队列的异常。这就有个问题：重回队列后消费者又消费，消费抛出异常又重回队列，就造成了死循环。<br><img src="/2020/952720210401193500/16.png" alt title="点击放大"></p><p>那怎么避免这种情况呢？</p><p>既然nack会造成死循环的话，我提供的一个思路是不使用basicNack()，把抛出异常的消息落库到一张表中，记录抛出的异常，消息体，消息Id。通过定时任务去处理。</p><p>如果你有什么好的解决方案，也可以留言讨论~</p><h5 id="4-2-double-ack"><a href="#4-2-double-ack" class="headerlink" title="4.2 double ack"></a>4.2 double ack</h5><p>有的时候比较粗心，不小心开启了自动Ack模式，又手动回复了Ack。那就会报这个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">消费者RabbitDemoConsumer从RabbitMQ服务端消费消息：java技术爱好者</span><br><span class="line">2020-08-02 22:52:42.148 ERROR 4880 --- [ 127.0.0.1:5672] o.s.a.r.c.CachingConnectionFactory       : Channel shutdown: channel error; protocol method: #method&lt;channel.close&gt;(reply-code&#x3D;406, reply-text&#x3D;PRECONDITION_FAILED - unknown delivery tag 1, class-id&#x3D;60, method-id&#x3D;80)</span><br><span class="line">2020-08-02 22:52:43.102  INFO 4880 --- [cTaskExecutor-1] o.s.a.r.l.SimpleMessageListenerContainer : Restarting Consumer@f4a3a8d: tags&#x3D;[&#123;amq.ctag-8MJeQ7el_PNbVJxGOOw7Rw&#x3D;rabbitmq.demo.topic&#125;], channel&#x3D;Cached Rabbit Channel: AMQChannel(amqp:&#x2F;&#x2F;guest@127.0.0.1:5672&#x2F;,5), conn: Proxy@782a1679 Shared Rabbit Connection: SimpleConnection@67c5b175 [delegate&#x3D;amqp:&#x2F;&#x2F;guest@127.0.0.1:5672&#x2F;, localPort&#x3D; 56938], acknowledgeMode&#x3D;AUTO local queue size&#x3D;0</span><br></pre></td></tr></table></figure><p>出现这个错误，可以检查一下yml文件是否添加了以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">        <span class="attr">concurrency:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">max-concurrency:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>如果上面这个配置已经添加了，还是报错，有可能你使用@Configuration配置了<br>SimpleRabbitListenerContainerFactory，根据SpringBoot的特性，代码优于配置，代码的配置覆盖了yml的配置，并且忘记设置手动manual模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title">rabbitListenerContainerFactory</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">factory.setConnectionFactory(connectionFactory);</span><br><span class="line"><span class="comment">//设置手动ack模式</span></span><br><span class="line">factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你还是有报错，那可能是写错地方了，写在生产者的项目了。以上的配置应该配置在消费者的项目。因为ack模式是针对消费者而言的。我就是写错了，写在生产者，折腾了几个小时，泪目~</p><h5 id="4-3-性能问题"><a href="#4-3-性能问题" class="headerlink" title="4.3 性能问题"></a>4.3 性能问题</h5><p>其实手动ACK相对于自动ACK肯定是会慢很多，我在网上查了一些资料，性能相差大概有10倍。所以一般在实际应用中不太建议开手动ACK模式。不过也不是绝对不可以开，具体情况具体分析，看并发量，还有数据的重要性等等。</p><p>所以在实际项目中还需要权衡一下并发量和数据的重要性，再决定具体的方案。</p><h5 id="4-4-启用手动ack模式，如果没有及时回复，会造成队列异常"><a href="#4-4-启用手动ack模式，如果没有及时回复，会造成队列异常" class="headerlink" title="4.4 启用手动ack模式，如果没有及时回复，会造成队列异常"></a>4.4 启用手动ack模式，如果没有及时回复，会造成队列异常</h5><p>如果开启了手动ACK模式，但是由于代码有bug的原因，没有回复RabbitMQ服务端，那么这条消息就会放到Unacked状态的消息堆里，只有等到消费者的连接断开才会转到Ready消息。如果消费者一直没有断开连接，那Unacked的消息就会越来越多，占用内存就越来越大，最后就会出现异常。</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>通过上面的学习后，总结了RabbitMQ防止数据丢失有三种方式：</p><ul><li>消息持久化</li><li>生产者消息确认机制(confirm模式)</li><li>消费者消息确认模式(ack模式)</li></ul><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6944195931302560295/" target="_blank" rel="noopener">Java架构师联盟</a>头条，原文连接点<a href="https://www.toutiao.com/i6944195931302560295/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;&gt;&lt;/a&gt;思维导图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2020/952720210401193500/1.png&quot; alt title=&quot;点击放大&quot;&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="MQ" scheme="http://huermosi.xyz/categories/MQ/"/>
    
      <category term="RabbitMQ" scheme="http://huermosi.xyz/categories/MQ/RabbitMQ/"/>
    
    
      <category term="rabbitmq" scheme="http://huermosi.xyz/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>一时语噻：二面鹅厂，面试官问出Nginx你了解吗</title>
    <link href="http://huermosi.xyz/2020/952720210401887300000/"/>
    <id>http://huermosi.xyz/2020/952720210401887300000/</id>
    <published>2020-03-01T14:40:14.000Z</published>
    <updated>2021-04-26T12:37:27.917Z</updated>
    
    <content type="html"><![CDATA[<p>前天二面鹅厂，面试官问出了“nginx你了解吗？”这样宽泛直白的句式，我一时抓不到重点，一时语噻。<br>下班想了一下，平时潜移默化用到不少nginx的能力，但在面试的时候没有吹成对应的概念。<br><img src="/2020/952720210401887300000/1.png" alt title="点击放大"></p><h4 id="面谈nginx核心能力"><a href="#面谈nginx核心能力" class="headerlink" title="面谈nginx核心能力"></a>面谈nginx核心能力</h4><p>nginx是老牌web服务器，以下口水话的nginx基础能力，大家都耳熟能详，看看就行，面试官也不打算考查这个。</p><blockquote><p>高并发连接: 官方称单节点支持5万并发连接数，实际生产环境能够承受2-3万并发。<br>内存消耗少: 在3万并发连接下，开启10个nginx进程仅消耗150M内存 (15M×10=150M)<br>配置简单<br>成本低廉: 开源免费</p></blockquote><h4 id="1-正向、反向代理"><a href="#1-正向、反向代理" class="headerlink" title="1. 正向、反向代理"></a>1. 正向、反向代理</h4><p>所谓“代理”，是指在内网边缘 设置一个硬件/软件转发请求；<br>“正向”还是“反向”的说法，取决于转发的是”出站请求”还是”入站请求”.</p><p>正向代理：处理来自客户端的出站请求，将其转发到Internet，然后将生成的响应返回给客户端。<br>反向代理：处理来自Internet的入站请求，将其转发给后端工作程序，然后将响应返回给Internet。<br><img src="/2020/952720210401887300000/2.png" alt title="点击放大"></p><ol><li>正向代理和反向代理 在代理的方向上不同，但都会代理处理HTTP请求/响应。</li><li>代理服务器存在的目的：</li></ol><ul><li>堡垒机/隔离内网： 内网客户端无法访问外网需要设置堡垒机、隐藏内网工作服务器</li><li>代理服务器附加功能： 对流量执行操作、使用缓存或压缩来提高性能、防御攻击并过滤信息</li></ul><h4 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2. 负载均衡"></a>2. 负载均衡</h4><p>负载均衡一般伴随着反向代理， 起到了 分配流量、透明代理、 增强容错的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream myapp1 &#123;</span><br><span class="line">        server srv1.example.com;</span><br><span class="line">        server srv2.example.com;</span><br><span class="line">        server srv3.example.com;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;myapp1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>早期我们的核心产品部署在两台windows Sever IIS上，前面部署了一个nginx，做了负载均衡。<br><img src="/2020/952720210401887300000/3.jpg" alt title="点击放大"></p><p>很明显，这里有个[负载均衡策略]的知识点。</p><p>round-robin 顾名思义：轮询<br>least-connected ： 下一个请求将发往最小活动链接的服务器<br>ip-hash： 根据客户端的ip地址和哈希函数 决定将请求发往哪个服务器<br><a href="http://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/load_balancing.html</a></p><p>延伸技能点：</p><ol><li>[服务发现]:在容器/K8S环境，服务地址是由集群系统动态分配，一般都内置了服务发现能力，docker-comppose/K8s中定义的服务名就代表了整个服务。<br>有个文章讲述了: 《巧用nginx 实现Docker-Comppose服务多实例》</li><li>[会话亲和力]：又叫“粘性会话”，确保在有状态的应用中，同一客户端的请求打到后端一个服务器上。<br>也有个示例可参考：《巧用会话亲和力做图片上传和预览》</li></ol><h4 id="3-动静分离"><a href="#3-动静分离" class="headerlink" title="3. 动静分离"></a>3. 动静分离</h4><p>动静分离与现在火热的前后端分离概念火热相关，</p><p>前端可以自行开发、测试，自行使用nginx形成静态资源服务器，后端服务仅作为附加资源。<br><img src="/2020/952720210401887300000/4.jpg" alt title="点击放大"><br>下面的例子表明 静态资源在/usr/share/nginx/html， 动态资源路径包含api或swagger。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">upstream eap_website &#123;</span><br><span class="line">  server eapwebsite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen      80;</span><br><span class="line">  location &#x2F; &#123;            # 静态资源</span><br><span class="line">root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">try_files $uri &#x2F;index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ^~ &#x2F;api&#x2F;  &#123;     # 动态资源</span><br><span class="line"> proxy_pass         http:&#x2F;&#x2F;eap_website&#x2F;api&#x2F;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ^~ &#x2F;swagger&#x2F;  &#123;    # 动态资源</span><br><span class="line"> proxy_pass         http:&#x2F;&#x2F;eap_website&#x2F;swagger&#x2F;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>延伸技能点</p><ol><li>以上流程也是《现代十二要素应用方法论》所推崇的第四点， 从这个体系来说，后端沦落为api开发，实属遗憾</li><li>这里有个《有关在容器生成阶段动态插入api基地址的妙招》，对动静分离的容器化很有裨益。</li></ol><h5 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h5><ol><li><p>通过端口支持 同一域名下多个webapp</p></li><li><p>绑定Https证书1、2点一起体现：一个域名绑定到443和8080端口两个https站点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">upstream receiver_server &#123;</span><br><span class="line">server receiver:80;</span><br><span class="line">&#125;</span><br><span class="line">upstream app_server &#123;</span><br><span class="line">server app:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen       443 ssl http2;</span><br><span class="line">server_name  eqid.gridsum.com;</span><br><span class="line">ssl_certificate         &#x2F;conf.crt&#x2F;live&#x2F;gridsum.com.crt;</span><br><span class="line">ssl_certificate_key     &#x2F;conf.crt&#x2F;live&#x2F;gridsum.com.key;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">proxy_pass         http:&#x2F;&#x2F;receiver_server&#x2F;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 8080 ssl http2;</span><br><span class="line">server_name             eqid.gridsum.com:8080;</span><br><span class="line">ssl_certificate         &#x2F;conf.crt&#x2F;live&#x2F;gridsum.com.crt;</span><br><span class="line">ssl_certificate_key     &#x2F;conf.crt&#x2F;live&#x2F;gridsum.com.key;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">proxy_pass         http:&#x2F;&#x2F;app_server&#x2F;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>支持rewrite重写规则: 能够根据域名、url的不同，将http请求分发到后端不同的应用服务器节点上。</p></li><li><p>内置健康检查功能: 如果后端的某一应用节点挂了，请求不会再转发给这个节点，不影响线上功能。<br>关键指令： max_fails, fail_timeout</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server backend1.example.com weight&#x3D;5;</span><br><span class="line">    server 127.0.0.1:8080       max_fails&#x3D;3 fail_timeout&#x3D;30s;</span><br><span class="line">    server unix:&#x2F;tmp&#x2F;backend3;</span><br><span class="line"></span><br><span class="line">    server backup1.example.com  backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节省带宽: 支持gzip压缩</p></li><li><p>解决跨域问题<br>① 反向代理② 增加CORS响应头5、6点一起体现： 在前后端分离项目，对跨域请求增加CORS响应头、对静态资源开启gzip压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">gzip on;</span><br><span class="line">gzip_types application&#x2F;javascript text&#x2F;css image&#x2F;jpeg;</span><br><span class="line"></span><br><span class="line">   root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">   index index.html index.htm;</span><br><span class="line">   try_files $uri &#x2F;index.html;</span><br><span class="line"></span><br><span class="line">   add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;</span><br><span class="line">   add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS, PUT, DELETE&#39;;</span><br><span class="line">   add_header &#39;Access-Control-Allow-Headers&#39; &#39;Content-Type&#39;;</span><br><span class="line">   add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6937900559185756709/" target="_blank" rel="noopener">IT互联网新资讯</a>头条，原文连接点<a href="https://www.toutiao.com/i6937900559185756709/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前天二面鹅厂，面试官问出了“nginx你了解吗？”这样宽泛直白的句式，我一时抓不到重点，一时语噻。&lt;br&gt;下班想了一下，平时潜移默化用到不少nginx的能力，但在面试的时候没有吹成对应的概念。&lt;br&gt;&lt;img src=&quot;/2020/952720210401887300000
      
    
    </summary>
    
    
      <category term="更多" scheme="http://huermosi.xyz/categories/%E6%9B%B4%E5%A4%9A/"/>
    
      <category term="NGINX" scheme="http://huermosi.xyz/categories/%E6%9B%B4%E5%A4%9A/NGINX/"/>
    
    
      <category term="NGINX" scheme="http://huermosi.xyz/tags/NGINX/"/>
    
      <category term="代理" scheme="http://huermosi.xyz/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="反向代理" scheme="http://huermosi.xyz/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一条简单的更新语句，MySQL是如何加锁的？</title>
    <link href="http://huermosi.xyz/2020/95272021213546/"/>
    <id>http://huermosi.xyz/2020/95272021213546/</id>
    <published>2020-02-11T14:13:46.000Z</published>
    <updated>2021-04-08T08:49:31.668Z</updated>
    
    <content type="html"><![CDATA[<p>看如下一条sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># table T (id int, name varchar(20))</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> T <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>MySQL在执行的过程中，是如何加锁呢？<br>再看下面这条语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>那这条语句呢？其实这其中包含太多知识点了。要回答这两个问题，首先需要了解一些知识。</p><h4 id="1-相关知识介绍"><a href="#1-相关知识介绍" class="headerlink" title="1. 相关知识介绍"></a>1. 相关知识介绍</h4><h5 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h5><p>在MySQL默认存储引擎InnoDB中，实现的是基于多版本的并发控制协议——MVCC（Multi-Version Concurrency Control）（注：与MVVC相对的，是基于锁的并发控制，Lock-Based Concurrency Control）。其中MVCC最大的好处是：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的提高了系统的并发性能，在现阶段，几乎所有的RDBMS，都支持MVCC。其实，MVCC就一句话总结：同一份数据临时保存多个版本的一种方式，进而实现并发控制。</p><h5 id="当前读和快照读"><a href="#当前读和快照读" class="headerlink" title="当前读和快照读"></a>当前读和快照读</h5><p>在MVCC并发控制中，读操作可以分为两类：快照读与当前读。</p><p><strong>快照读</strong>（简单的select操作）：读取的是记录中的可见版本（可能是历史版本），不用加锁。这你就知道第二个问题的答案了吧。</p><p><strong>当前读</strong>（特殊的select操作、insert、delete和update）：读取的是记录中最新版本，并且当前读返回的记录都会加上锁，这样保证了了其他事务不会再并发修改这条记录。</p><h5 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h5><p>也叫做聚簇索引。在InnoDB中，数据的组织方式就是聚簇索引：完整的记录，储存在主键索引中，通过主键索引，就可以获取记录中所有的列。</p><h5 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h5><p>也就是最左优先，这条原则针对的是组合索引和前缀索引，理解：</p><p>1、在MySQL中，进行条件过滤时，是按照向右匹配直到遇到范围查询（&gt;,&lt;,between,like）就停止匹配，比如说a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a, b, c, d)顺序的索引，d是用不到索引的，如果建立(a, b, d, c)索引就都会用上，其中a，b，d的顺序可以任意调整。</p><p>2、= 和 in 可以乱序，比如 a = 1 and b = 2 and c = 3 建立(a, b, c)索引可以任意顺序，MySQL的查询优化器会优化索引可以识别的形式。</p><h5 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h5><p>传统的RDMS加锁的一个原则，就是2PL(Two-Phase Locking，二阶段锁)。也就是说锁操作分为两个阶段：加锁阶段和解锁阶段，并且保证加锁阶段和解锁阶段不想交。也就是说在一个事务中，不管有多少条增删改，都是在加锁阶段加锁，在 commit 后，进入解锁阶段，才会全部解锁。</p><h5 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h5><p>MySQL/InnoDB中，定义了四种隔离级别：</p><p><strong>Read Uncommitted</strong>：可以读取未提交记录。此隔离级别不会使用。</p><p><strong>Read Committed（RC）</strong>：针对当前读，RC隔离级别保证了对读取到的记录加锁（记录锁），存在幻读现象。</p><p><strong>Repeatable Read（RR）</strong>：针对当前读，RR隔离级别保证对读取到的记录加锁（记录锁），同时保证对读取的范围加锁，新的满足查询条件的记录不能够插入（间隙锁），不存在幻读现象。</p><p><strong>Serializable</strong>：从MVCC并发控制退化为基于锁的并发控制。不区别快照读和当前读，所有的读操作都是当前读，读加读锁（S锁），写加写锁（X锁）。在该隔离级别下，读写冲突，因此并发性能急剧下降，在MySQL/InnoDB中不建议使用。</p><h5 id="Gap锁和Next-Key锁"><a href="#Gap锁和Next-Key锁" class="headerlink" title="Gap锁和Next-Key锁"></a>Gap锁和Next-Key锁</h5><p>在InnoDB中完整行锁包含三部分：</p><p>记录锁（Record Lock）：记录锁锁定索引中的一条记录。</p><p>间隙锁（Gap Lock）：间隙锁要么锁住索引记录中间的值，要么锁住第一个索引记录前面的值或最后一个索引记录后面的值。</p><p>Next-Key Lock：Next-Key锁时索引记录上的记录锁和在记录之前的间隙锁的组合。</p><h4 id="2-进行分析"><a href="#2-进行分析" class="headerlink" title="2. 进行分析"></a>2. 进行分析</h4><p>了解完以上的小知识点，我们开始分析第一个问题。当看到这个问题的时候，你可能会毫不犹豫的说，加写锁啊。这答案也错也对，因为已知条件太少。那么有那些需要已知的前提条件呢？</p><p>前提一：id列是不是主键？<br>前提二：当前系统的隔离级别是什么？<br>前提三：id列如果不是主键，那么id列上有没有索引呢？<br>前提四：id列上如果有二级索引，那么是唯一索引吗？<br>前提五：SQL执行计划是什么？索引扫描？还是全表扫描<br>根据上面的前提条件，可以有九种组合，当然还没有列举完全。</p><p>id列是主键，RC隔离级别<br>id列是二级唯一索引，RC隔离级别<br>id列是二级不唯一索引，RC隔离级别<br>id列上没有索引，RC隔离级别<br>id列是主键，RR隔离级别<br>id列是二级唯一索引，RR隔离级别<br>id列是二级不唯一索引，RR隔离级别<br>id列上没有索引，RR隔离级别</p><h5 id="组合一：id主键-RC"><a href="#组合一：id主键-RC" class="headerlink" title="组合一：id主键 + RC"></a>组合一：id主键 + RC</h5><p>这个组合是分析最简单的，到执行该语句时，只需要将主键id = 10的记录加上X锁。如下图所示：<br><img src="/2020/95272021213546/1.jpg" alt title="点击放大"></p><p>结论：id是主键是，此SQL语句只需要在id = 10这条记录上加上X锁即可。</p><h5 id="组合二：id唯一索引-RC"><a href="#组合二：id唯一索引-RC" class="headerlink" title="组合二：id唯一索引 + RC"></a>组合二：id唯一索引 + RC</h5><p>这个组合，id不是主键，而是一个Unique的二级索引键值。在RC隔离级别下，是怎么加锁的呢？看下图：<br><img src="/2020/95272021213546/2.jpg" alt title="点击放大"></p><p>由于id是Unique索引，因此delete语句会选择走id列的索引进行where条件过滤，在找到id = 10的记录后，首先会将Unique索引上的id = 10的记录加上X锁，同时，会根据读取到的name列，回到主键索引（聚簇索引），然后将聚簇索引上的name = ‘e’ 对应的主键索引项加X锁。</p><p>结论：若id列是Unique列，其上有Unique索引，那么SQL需要加两个X锁，一个对应于id Unique索引上的id = 10的记录，另一把锁对应于聚簇索引上的(name = ‘e’, id = 10)的记录。</p><h5 id="组合三：id不唯一索引-RC"><a href="#组合三：id不唯一索引-RC" class="headerlink" title="组合三：id不唯一索引+RC"></a>组合三：id不唯一索引+RC</h5><p>该组合中，id列不在唯一，而是个普通索引，那么当执行sql语句时，MySQL又是如何加锁呢？看下图：<br><img src="/2020/95272021213546/3.jpg" alt title="点击放大"></p><p>由上图可以看出，首先，id列索引上，满足id = 10查询的记录，均加上X锁。同时，这些记录对应的主键索引上的记录也加上X锁。与组合er的唯一区别，组合二最多只有一个满足条件的记录，而在组合三中会将所有满足条件的记录全部加上锁。</p><p>结论：若id列上有非唯一索引，那么对应的所有满足SQL查询条件的记录，都会加上锁。同时，这些记录在主键索引上也会加上锁。</p><h5 id="组合四：id无索引-RC"><a href="#组合四：id无索引-RC" class="headerlink" title="组合四：id无索引+RC"></a>组合四：id无索引+RC</h5><p>相对于前面的组合，该组合相对特殊，因为id列上无索引，所以在 where id = 10 这个查询条件下，没法通过索引来过滤，因此只能全表扫描做过滤。对于该组合，MySQL又会进行怎样的加锁呢？看下图：<br><img src="/2020/95272021213546/4.jpg" alt title="点击放大"></p><p>由于id列上无索引，因此只能走聚簇索引，进行全表扫描。由图可以看出满足条件的记录只有两条，但是，聚簇索引上的记录都会加上X锁。但在实际操作中，MySQL进行了改进，在进行过滤条件时，发现不满足条件后，会调用 unlock_row 方法，把不满足条件的记录放锁（违背了2PL原则）。这样做，保证了最后满足条件的记录加上锁，但是每条记录的加锁操作是不能省略的。</p><p>结论：若id列上没有索引，MySQL会走聚簇索引进行全表扫描过滤。由于是在MySQl Server层面进行的。因此每条记录无论是否满足条件，都会加上X锁，但是，为了效率考虑，MySQL在这方面进行了改进，在扫描过程中，若记录不满足过滤条件，会进行解锁操作。同时优化违背了2PL原则。</p><h5 id="组合五：id主键-RR"><a href="#组合五：id主键-RR" class="headerlink" title="组合五：id主键+RR"></a>组合五：id主键+RR</h5><p>该组合为id是主键，Repeatable Read隔离级别，针对于上述的SQL语句，加锁过程和组合一（id主键+RC）一致。</p><h5 id="组合六：id唯一索引-RR"><a href="#组合六：id唯一索引-RR" class="headerlink" title="组合六：id唯一索引+RR"></a>组合六：id唯一索引+RR</h5><p>该组合与组合二的加锁过程一致。</p><h5 id="组合七：id不唯一索引-RR"><a href="#组合七：id不唯一索引-RR" class="headerlink" title="组合七：id不唯一索引+RR"></a>组合七：id不唯一索引+RR</h5><p>在组合一到组合四中，隔离级别是Read Committed下，会出现幻读情况，但是在该组合Repeatable Read级别下，不会出现幻读情况，这是怎么回事呢？而MySQL又是如何给上述语句加锁呢？看下图：<br><img src="/2020/95272021213546/5.jpg" alt title="点击放大"></p><p>该组合和组合三看起来很相似，但差别很大，在改组合中加入了一个间隙锁（Gap锁）。这个Gap锁就是相对于RC级别下，RR级别下不会出现幻读情况的关键。实质上，Gap锁不是针对于记录本身的，而是记录之间的Gap。所谓幻读，就是同一事务下，连续进行多次当前读，且读取一个范围内的记录(包括直接查询所有记录结果或者做聚合统计), 发现结果不一致(标准档案一般指记录增多, 记录的减少应该也算是幻读)。</p><p>那么该如何解决这个问题呢？如何保证多次当前读返回一致的记录，那么就需要在多个当前读之间，其他事务不会插入新的满足条件的记录并提交。为了实现该结果，Gap锁就应运而生。</p><p>如图所示，有些位置可以插入新的满足条件的记录，考虑到B+树的有序性，满足条件的记录一定是具有连续性的。因此会在 [4, b], [10, c], [10, d], [20, e] 之间加上Gap锁。</p><p>Insert操作时，如insert(10, aa)，首先定位到 [4, b], [10, c]间，然后插入在插入之前，会检查该Gap是否加锁了，如果被锁上了，则Insert不能加入记录。因此通过第一次当前读，会把满足条件的记录加上X锁，还会加上三把Gap锁，将可能插入满足条件记录的3个Gap锁上，保证后续的Insert不能插入新的满足 id = 10 的记录，也就解决了幻读问题。</p><p>而在组合五，组合六中，同样是RR级别，但是不用加上Gap锁，在组合五中id是主键，组合六中id是Unique键，都能保证唯一性。一个等值查询，最多只能返回一条满足条件的记录，而且新的相同取值的记录是无法插入的。</p><p>结论：在RR隔离级别下，id列上有非唯一索引，对于上述的SQL语句；首先，通过id索引定位到第一条满足条件的记录，给记录加上X锁，并且给Gap加上Gap锁，然后在主键聚簇索引上满足相同条件的记录加上X锁，然后返回；之后读取下一条记录重复进行。直至第一条出现不满足条件的记录，此时，不需要给记录加上X锁，但是需要给Gap加上Gap锁吗，最后返回结果。</p><h5 id="组合八：id无索引-RR"><a href="#组合八：id无索引-RR" class="headerlink" title="组合八：id无索引+RR"></a>组合八：id无索引+RR</h5><p>该组合中，id列上无索引，只能进行全表扫描，那么该如何加锁，看下图：<br><img src="/2020/95272021213546/6.jpg" alt title="点击放大"></p><p>如图，可以看出这是一个很恐怖的事情，全表每条记录要加X锁，每个Gap加上Gap锁，如果表上存在大量数据时，又是什么情景呢？这种情况下，这个表，除了不加锁的快照读，其他任何加锁的并发SQL，均不能执行，不能更新，删除，插入，这样，全表锁死。</p><p>当然，和组合四一样，MySQL进行了优化，就是semi-consistent read。semi-consistent read开启的情况下，对于不满足条件的记录，MySQL会提前放锁，同时Gap锁也会释放。而semi-consistent read是如何触发：要么在Read Committed隔离级别下；要么在Repeatable Read隔离级别下，设置了<br>innodb_locks_unsafe_for_binlog 参数。</p><p>结论：在Repeatable Read隔离级别下，如果进行全表扫描的当前读，那么会锁上表上的所有记录，并且所有的Gap加上Gap锁，杜绝所有的 delete/update/insert 操作。当然在MySQL中，可以触发 semi-consistent read来缓解锁开销与并发影响，但是semi-consistent read本身也会带来其他的问题，不建议使用。</p><h5 id="组合九：Serializable"><a href="#组合九：Serializable" class="headerlink" title="组合九：Serializable"></a>组合九：Serializable</h5><p>在最后组合中，对于上诉的删除SQL语句，加锁过程和组合八一致。但是，对于查询语句（比如select * from T1 where id = 10）来说，在RC，RR隔离级别下，都是快照读，不加锁。在Serializable隔离级别下，无论是查询语句也会加锁，也就是说快照读不存在了，MVCC降级为Lock-Based CC。</p><h4 id="3-结论"><a href="#3-结论" class="headerlink" title="3. 结论"></a>3. 结论</h4><p>在MySQL/InnoDB中，所谓的读不加锁，并不适用于所有的情况，而是和隔离级别有关。在Serializable隔离级别下，所有的操作都会加锁。</p><p>一条简单的删除语句加锁情况也就分析完成了，但是学习不止于此，还在继续，对于复杂SQL语句又是如何加锁的呢？MySQL中的索引的分析又是怎样的呢？性能分析、性能优化这些又是怎么呢？还需要进一步的学习探索。</p><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6798269146309067271/" target="_blank" rel="noopener">Java技术架构</a>头条，原文连接点<a href="https://www.toutiao.com/i6798269146309067271/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看如下一条sql语句：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
    
      <category term="MYSQL" scheme="http://huermosi.xyz/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://huermosi.xyz/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>线上MySQL读写分离，出现写完读不到问题如何解决？</title>
    <link href="http://huermosi.xyz/2020/9527202104014223000/"/>
    <id>http://huermosi.xyz/2020/9527202104014223000/</id>
    <published>2020-02-01T14:27:22.000Z</published>
    <updated>2021-04-08T08:49:31.660Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来详细了解一下主从同步延迟时读写分离发生写后读不到的问题，依次讲解问题出现的原因，解决策略以及 Sharding-jdbc、MyCat 和 MaxScale 等开源数据库中间件具体的实现方案。</p><h4 id="1-写后读不到问题"><a href="#1-写后读不到问题" class="headerlink" title="1. 写后读不到问题"></a>1. 写后读不到问题</h4><p>MySQL 经典的一主两从三节点架构是大多数创业公司初期使用的主流数据存储方案之一，主节点处理写操作，两个从节点处理读操作，分摊了主库的压力。</p><p>但是，有时候可能会遇到执行完写操作后，立刻去读发现读不到或者读到旧状态的尴尬场景。这是由于主从同步可能存在延迟，在主节点执行完写操作，再去从节点执行读操作，读取了之前旧的状态。<br><img src="/2020/9527202104014223000/1.jpg" alt title="点击放大"></p><p>上图展示了此类问题出现的操作顺序示意图：</p><ul><li>客户端首先通过代理向主节点 Master 进行了写入操作</li><li>紧接着第二步去从节点 Slave A 执行读操作，此时 Master 和 Slave A 之间的同步还未完成，所以第二步的读操作读取到了旧状态</li><li>当第五步再次进行读操作时，此时同步已经完成，所以可以从 Slave B 中读取到正确的状态。</li></ul><p>下面，我们就来看一下为什么会出现此类问题。</p><h4 id="2-MySQL-主从同步"><a href="#2-MySQL-主从同步" class="headerlink" title="2. MySQL 主从同步"></a>2. MySQL 主从同步</h4><p>理解问题背后发生的原因，才能更好的解决问题。MySQL 主从复制的过程大致如下图所示，本篇文章只讲解同步过程中的流程，建立同步连接和失联重传不是重点，暂不讲解，感兴趣的同学可以自行了解。<br><img src="/2020/9527202104014223000/2.png" alt title="点击放大"></p><p>MySQL 主从复制，涉及主从两个节点，一共四个四个线程参与其中：</p><ul><li>主节点的 Client Thread，处理客户端请求的线程，执行如图所示的1~5步骤，2，3，4步骤是为了保证数据的一致性和尽量减少丢失，第三步骤时会通知 Dump Thread；</li><li>主节点的 Dump Thread，接收到 Client Thread 通知后，负责读取本地的 binlog 的数据，将 binlog 数据，binlog 文件名 以及当前发送 binlog 的位置信息发送给从节点；</li><li>从节点的 IO Thread 负责接收 Dump Thread 发送的 binlog 数据和相关位置信息，将其追加到本地的 relay log 等文件中；</li><li>从节点的 SQL Thread 检测到 relay log 追加了新数据，则解析其内容(其实就是解析 binlog 文件的内容)为可以执行的 SQL 语句，然后在本地数据执行，并记录下当前执行的 relay log 位置。</li></ul><p>上述是默认的异步同步模式，我们发现，从主节点提交成功到从节点同步完成，中间间隔了6，7，8，9，10多个步骤，涉及到一次网络传输，多次文件读取和写入的磁盘 IO 操作，以及最后的 SQL 执行的 CPU 操作。</p><p>所以，当主从节点间网络传输出现问题，或者从节点性能较低时，主从节点间的同步就会出现延迟，导致文章一开始提及的写后读不到的问题。在高并发场景，从节点一般要过几十毫秒，甚至几百毫秒才能读到最新的状态。</p><h4 id="3-常见的解决策略"><a href="#3-常见的解决策略" class="headerlink" title="3. 常见的解决策略"></a>3. 常见的解决策略</h4><p>一般来讲，大致有如下方案解决写后读不出问题：</p><ul><li>强制走主库</li><li>判断主备无延迟</li><li>等主库位点或 GTID 方案</li></ul><h5 id="强制走主库"><a href="#强制走主库" class="headerlink" title="强制走主库"></a>强制走主库</h5><p>强制走主库方案最容易理解和实现，它也是最常用的方案。顾名思义，它就是强制让部分必须要读到最新状态的读操作去主节点执行，这样就不会出现写后读不出问题。这种方案问题在于将一部分读压力给了主节点，部分破化了读写分离的目的，降低了整个系统的扩展性。</p><p>一般主流的数据库中间件都提供了强制走主库的机制，比如，在 sharding-jdbc 中，可以使用 Hint 来强制路由主库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HintManager hintManager = HintManager.getInstance();</span><br><span class="line">hintManager.setMasterRouteOnly();</span><br><span class="line"><span class="comment">// 继续JDBC操作</span></span><br></pre></td></tr></table></figure><p>它的原理就是在 SQL 语句前添加 Hint，然后数据库中间件会识别出 Hint，将其路由到主节点。</p><p>下面，我们就来看一下如果要去从库查询，并且要避免过期读的方案，并分析各个方案的优缺点。</p><h5 id="判断主备无延迟"><a href="#判断主备无延迟" class="headerlink" title="判断主备无延迟"></a>判断主备无延迟</h5><p>第二种方案是使用 show slave status 语句结果中的部分值来判断主从同步的延迟时间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; show slave status</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Master_Log_File: mysql-bin.001822</span><br><span class="line">Read_Master_Log_Pos: 290072815</span><br><span class="line">Seconds_Behind_Master: 2923</span><br><span class="line">Relay_Master_Log_File: mysql-bin.001821</span><br><span class="line">Exec_Master_Log_Pos: 256529431</span><br><span class="line">Auto_Position: 0</span><br><span class="line">Retrieved_Gtid_Set: </span><br><span class="line">Executed_Gtid_Set: </span><br><span class="line">.....</span><br></pre></td></tr></table></figure><ul><li>seconds_behind_master，表示落后主节点秒数，如果此值为0，则表示主从无延迟</li><li>Master_Log_File 和 Read_Master_Log_Pos，表示的是读到的主库的最新位点，Relay_Master_Log_File 和 Exec_Master_Log_Pos，表示的是备库执行的最新位点。如果这两组值相等，则表示主从无延迟</li><li>Auto_Position=1 ，表示使用了 GTID 协议，并且备库收到的所有日志的 GTID 集合 Retrieved_Gtid_Set 和 执行完成的 GTID 集合 Executed_Gtid_Set 相等，则表示主从无延迟。</li></ul><p>在进行读操作前，先根据上述方式来判断主从是否有延迟，如果有延迟，则一直等待到无延迟后执行。但是这类方案在判断是否有延迟时存在着假阳和假阴的问题：</p><ul><li>判断无延迟，其他延迟了。因为上述判断是基于从节点的状态，当主节点的 Dump Thread 尚未将最新状态发送给从节点的 IO SQL 时，从节点可能会错误的判断自己和主节点无延迟。</li><li>判断有延迟，但是读操作读取的最新状态已经同步。因为 MySQL主从复制是一直在进行的，写后直接读的同时可能还有其他无关写操作，虽然主从有延迟，但是对于第一次写操作的同步已经完成，所以读操作已经可以读到最新的状态。</li></ul><p>对于第一个问题，需要使用主从复制的 semi-sync 模式，上文中讲解介绍的是默认的异步模式，semi-sync 模式的流程如下图所示：<br><img src="/2020/9527202104014223000/3.png" alt title="点击放大"></p><ul><li>当主节点事务提交的时候，Dump Thread 把 binlog 发给从节点；</li><li>从节点的 IO Thread 收到 binlog 以后，发回给主节点一个 ack，表示收到了；</li><li>主节点的 Dump Thread 收到这个 ack 以后，再通知 Client Thread ，此时才能给客户端返回执行成功的响应。</li></ul><p>这样，写操作执行后，就确保从节点已经读取到主节点发送的 binglog 数据，即 Master_Log_File、 Read_Master_Log_Pos 或 Retrieved_Gtid_Set 是最新的，这样才能与执行的相关数据进行对比，判断是否有延迟。</p><p>可惜的是，上述 semi-sync 模式只需要等待一个从节点的ACK，所以一主多从的模式该方案将会无效。</p><p>虽然该方案有种种问题，但是对于一致性要求不那么高的场景也能适用，比如 MyCat 就是用 seconds_behind_master 是否落后主节点过多，如果超过一定阈值，就将其从有效从节点列表中删除，不再将读请求路由到它身上。</p><p>在 MyCAT 的用于监听从节点状态，发送心跳的 MySQLDetector 类中，它会读取从节点的 seconds_behind_master，如果其值大于配置的 slaveThreshold，则将打印日志，并将延迟时间设置到心跳信息中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String Seconds_Behind_Master = resultResult.get( <span class="string">"Seconds_Behind_Master"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == Seconds_Behind_Master )&#123;</span><br><span class="line">    MySQLHeartbeat.LOGGER.warn(<span class="string">"Master is down but its relay log is clean."</span>);</span><br><span class="line">    heartbeat.setSlaveBehindMaster(<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="string">""</span>.equals(Seconds_Behind_Master)) &#123;</span><br><span class="line">    <span class="keyword">int</span> Behind_Master = Integer.parseInt(Seconds_Behind_Master);</span><br><span class="line">    <span class="keyword">if</span> ( Behind_Master &gt;  source.getHostConfig().getSlaveThreshold() ) &#123;</span><br><span class="line">        MySQLHeartbeat.LOGGER.warn(<span class="string">"found MySQL master/slave Replication delay !!! "</span></span><br><span class="line">                + heartbeat.getSource().getConfig() + <span class="string">", binlog sync time delay: "</span> + Behind_Master + <span class="string">"s"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    heartbeat.setSlaveBehindMaster( Behind_Master );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，我们就介绍能够解决第二个问题的方案，即判断有延迟，但是读操作读取的特定最新状态已经同步。</p><h5 id="等GTID-方案"><a href="#等GTID-方案" class="headerlink" title="等GTID 方案"></a>等GTID 方案</h5><p>首先介绍一下 GTID，也就是全局事务 ID，是一个事务在提交的时候生成的，是这个事务的唯一标识。它由MySQL 实例的uuid和一个整数组成，该整数由该实例维护，初始值是 1，每次该实例提交事务后都会加一。</p><p>MySQL 提供了一条基于 GTID 的命令，用于在从节点上执行，等待从库同步到了对应的 GTID（binlog文件中会包含 GTID），或者超时返回。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> wait_for_executed_gtid_set(gtid_set, <span class="keyword">timeout</span>);</span><br></pre></td></tr></table></figure><p>MySQL 在执行完事务后，会将该事务的 GTID 会给客户端，然后客户端可以使用该命令去要执行读操作的从库中执行，等待该 GTID，等待成功后，再执行读操作；如果等待超时，则去主库执行读操作，或者再换一个从库执行上述流程。</p><p>MariaDB 的 MaxScale 就是使用该方案，MaxScale 是 MariaDB 开发的一个数据库智能代理服务(也支持 MySQL)，允许根据数据库 SQL 语句将请求转向目标一个到多个服务器，可设定各种复杂程度的转向规则。<br><img src="/2020/9527202104014223000/4.png" alt title="点击放大"></p><p>MaxScale 在其 readwritesplit.hh 头文件和 rwsplit_causal_reads.cc 文件中的 add_prefix_wait_gtid 函数中使用了上述方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define MYSQL_WAIT_GTID_FUNC   &quot;WAIT_FOR_EXECUTED_GTID_SET&quot;</span><br><span class="line">static const char gtid_wait_stmt[] &#x3D;</span><br><span class="line">    &quot;SET @maxscale_secret_variable&#x3D;(SELECT CASE WHEN %s(&#39;%s&#39;, %s) &#x3D; 0 &quot;</span><br><span class="line">    &quot;THEN 1 ELSE (SELECT 1 FROM INFORMATION_SCHEMA.ENGINES) END);&quot;;</span><br><span class="line"></span><br><span class="line">GWBUF* RWSplitSession::add_prefix_wait_gtid(uint64_t version, GWBUF* origin) &#123;</span><br><span class="line">  ....</span><br><span class="line">  snprintf(prefix_sql, prefix_len, gtid_wait_stmt, wait_func, gtid_position.c_str(), gtid_wait_timeout);</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子，原来要执行读操作的 SQL 和添加了前缀的 SQL 如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`city`</span>;</span><br><span class="line"><span class="keyword">SET</span> @maxscale_secret_variable=(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> WAIT_FOR_EXECUTED_GTID_SET(<span class="string">'232-1-1'</span>, <span class="number">10</span>) = <span class="number">0</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.ENGINES) <span class="keyword">END</span>); <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`city`</span>;</span><br></pre></td></tr></table></figure><p>当WAIT_FOR_EXECUTED_GTID_SET 执行失败后，原 SQL 就不会再执行，而是将该 SQL 去主节点执行。</p><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6937283413103608359/" target="_blank" rel="noopener">代码小当家</a>头条，原文连接点<a href="https://www.toutiao.com/i6937283413103608359/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们来详细了解一下主从同步延迟时读写分离发生写后读不到的问题，依次讲解问题出现的原因，解决策略以及 Sharding-jdbc、MyCat 和 MaxScale 等开源数据库中间件具体的实现方案。&lt;/p&gt;
&lt;h4 id=&quot;1-写后读不到问题&quot;&gt;&lt;a href=&quot;#1-写
      
    
    </summary>
    
    
      <category term="MYSQL" scheme="http://huermosi.xyz/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://huermosi.xyz/tags/MYSQL/"/>
    
      <category term="读写分离" scheme="http://huermosi.xyz/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
      <category term="复制" scheme="http://huermosi.xyz/tags/%E5%A4%8D%E5%88%B6/"/>
    
      <category term="主从同步" scheme="http://huermosi.xyz/tags/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>单点登录SSO方法之Spring Security JWT实现</title>
    <link href="http://huermosi.xyz/2020/95272021042143/"/>
    <id>http://huermosi.xyz/2020/95272021042143/</id>
    <published>2020-01-01T13:56:05.000Z</published>
    <updated>2021-04-08T08:49:31.753Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-什么是单点登陆"><a href="#1-什么是单点登陆" class="headerlink" title="1. 什么是单点登陆"></a>1. 什么是单点登陆</h4><p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统</p><h4 id="2-简单的运行机制"><a href="#2-简单的运行机制" class="headerlink" title="2. 简单的运行机制"></a>2. 简单的运行机制</h4><p>单点登录的机制其实是比较简单的，用一个现实中的例子做比较。某公园内部有许多独立的景点，游客可以在各个景点门口单独买票。对于需要游玩所有的景点的游客，这种买票方式很不方便，需要在每个景点门口排队买票，钱包拿 进拿出的，容易丢失，很不安全。于是绝大多数游客选择在大门口买一张通票（也叫套票），就可以玩遍所有的景点而不需要重新再买票。他们只需要在每个景点门 口出示一下刚才买的套票就能够被允许进入每个独立的景点。<br>单点登录的机制也一样，如下图所示:<br><img src="/2020/95272021042143/1.png" alt title="点击放大"></p><p><code>用户认证</code>：这一环节主要是用户向认证服务器发起认证请求，认证服务器给用户返回一个成功的令牌token，主要在认证服务器中完成，即图中的认证系统，注意认证系统只能有一个。<br><code>身份校验</code>：这一环节是用户携带token去访问其他服务器时，在其他服务器中要对token的真伪进行检验，主要在资源服务器中完成，即图中的应用系统2 3</p><h4 id="3-JWT介绍"><a href="#3-JWT介绍" class="headerlink" title="3. JWT介绍"></a>3. JWT介绍</h4><h5 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h5><p>从分布式认证流程中，我们不难发现，这中间起最关键作用的就是token，token的安全与否，直接关系到系统的健壮性，这里我们选择使用JWT来实现token的生成和校验。<br>JWT，全称JSON Web Token，<a href="https://jwt.io" target="_blank" rel="noopener">官网地址</a>，是一款出色的分布式身份校验方案。可以生成token，也可以解析检验token。</p><h5 id="JWT生成的token由三部分组成："><a href="#JWT生成的token由三部分组成：" class="headerlink" title="JWT生成的token由三部分组成："></a>JWT生成的token由三部分组成：</h5><ul><li>头部：主要设置一些规范信息，签名部分的编码格式就在头部中声明。</li><li>载荷：token中存放有效信息的部分，比如用户名，用户角色，过期时间等，但是不要放密码，会泄露！</li><li>签名：将头部与载荷分别采用base64编码后，用“.”相连，再加入盐，最后使用头部声明的编码类型进行编码，就得到了签名。</li></ul><h5 id="JWT生成token的安全性分析"><a href="#JWT生成token的安全性分析" class="headerlink" title="JWT生成token的安全性分析"></a>JWT生成token的安全性分析</h5><p>从JWT生成的token组成上来看，要想避免token被伪造，主要就得看签名部分了，而签名部分又有三部分组成，其中头部和载荷的base64编码，几乎是透明的，毫无安全性可言，那么最终守护token安全的重担就落在了加入的盐上面了！试想：如果生成token所用的盐与解析token时加入的盐是一样的。岂不是类似于中国人民银行把人民币防伪技术公开了？大家可以用这个盐来解析token，就能用来伪造token。这时，我们就需要对盐采用非对称加密的方式进行加密，以达到生成token与校验token方所用的盐不一致的安全效果！</p><h5 id="非对称加密RSA介绍"><a href="#非对称加密RSA介绍" class="headerlink" title="非对称加密RSA介绍"></a>非对称加密RSA介绍</h5><ul><li>基本原理：同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端</li><li>私钥加密，持有私钥或公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li><li>优点：安全，难以破解</li><li>缺点：算法比较耗时，为了安全，可以接受</li><li>历史：三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字缩写：RSA。</li></ul><h4 id="4-SpringSecurity整合JWT"><a href="#4-SpringSecurity整合JWT" class="headerlink" title="4. SpringSecurity整合JWT"></a>4. SpringSecurity整合JWT</h4><h5 id="4-1-认证思路分析"><a href="#4-1-认证思路分析" class="headerlink" title="4.1 认证思路分析"></a>4.1 认证思路分析</h5><p>SpringSecurity主要是通过过滤器来实现功能的！我们要找到SpringSecurity实现认证和校验身份的过滤器！</p><h5 id="回顾集中式认证流程"><a href="#回顾集中式认证流程" class="headerlink" title="回顾集中式认证流程"></a>回顾集中式认证流程</h5><p><strong>用户认证：</strong><br>使用UsernamePasswordAuthenticationFilter过滤器中attemptAuthentication方法实现认证功能，该过滤器父类中successfulAuthentication方法实现认证成功后的操作。<br><strong>身份校验：</strong><br>使用BasicAuthenticationFilter过滤器中doFilterInternal方法验证是否登录，以决定能否进入后续过滤器。</p><h5 id="分析分布式认证流程"><a href="#分析分布式认证流程" class="headerlink" title="分析分布式认证流程"></a>分析分布式认证流程</h5><p><strong>用户认证：</strong><br>由于分布式项目，多数是前后端分离的架构设计，我们要满足可以接受异步post的认证请求参数，需要修改UsernamePasswordAuthenticationFilter过滤器中attemptAuthentication方法，让其能够接收请求体。<br>另外，默认successfulAuthentication方法在认证通过后，是把用户信息直接放入session就完事了，现在我们需要修改这个方法，在认证通过后生成token并返回给用户。<br><strong>身份校验：</strong><br>原来BasicAuthenticationFilter过滤器中doFilterInternal方法校验用户是否登录，就是看session中是否有用户信息，我们要修改为，验证用户携带的token是否合法，并解析出用户信息，交给SpringSecurity，以便于后续的授权功能可以正常使用。</p><h5 id="4-2-具体实现"><a href="#4-2-具体实现" class="headerlink" title="4.2 具体实现"></a>4.2 具体实现</h5><p>为了演示单点登录的效果，我们设计如下项目结构<br><img src="/2020/95272021042143/2.jpg" alt title="点击放大"></p><h5 id="4-2-1-父工程创建"><a href="#4-2-1-父工程创建" class="headerlink" title="4.2.1 父工程创建"></a>4.2.1 父工程创建</h5><p>因为本案例需要创建多个系统，所以我们使用maven聚合工程来实现，首先创建一个父工程，导入springboot的父依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-2-2-公共工程创建"><a href="#4-2-2-公共工程创建" class="headerlink" title="4.2.2 公共工程创建"></a>4.2.2 公共工程创建</h5><p>然后创建一个common工程，其他工程依赖此系统<br><img src="/2020/95272021042143/3.png" alt title="点击放大"></p><p>导入JWT相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jackson包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建相关的工具类<br><img src="/2020/95272021042143/4.jpg" alt title="点击放大"></p><p>Payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 10:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payload</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> T userInfo;</span><br><span class="line">    <span class="keyword">private</span> Date expiration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JsonUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JsonUtils<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj.getClass() == String<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (String) obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"json序列化出错："</span> + obj, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">toBean</span><span class="params">(String json, Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(json, tClass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"json解析出错："</span> + json, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">toList</span><span class="params">(String json, Class&lt;E&gt; eClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(json, mapper.getTypeFactory().constructCollectionType(List<span class="class">.<span class="keyword">class</span>, <span class="title">eClass</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"json解析出错："</span> + json, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">toMap</span><span class="params">(String json, Class&lt;K&gt; kClass, Class&lt;V&gt; vClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(json, mapper.getTypeFactory().constructMapType(Map<span class="class">.<span class="keyword">class</span>, <span class="title">kClass</span>, <span class="title">vClass</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"json解析出错："</span> + json, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">nativeRead</span><span class="params">(String json, TypeReference&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(json, type);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"json解析出错："</span> + json, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JwtUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dpb.domain.Payload;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jws;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * 生成token以及校验token相关方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JWT_PAYLOAD_USER_KEY = <span class="string">"user"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfo   载荷中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire     过期时间，单位分钟</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateTokenExpireInMinutes</span><span class="params">(Object userInfo, PrivateKey privateKey, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .claim(JWT_PAYLOAD_USER_KEY, JsonUtils.toString(userInfo))</span><br><span class="line">                .setId(createJTI())</span><br><span class="line">                .setExpiration(DateTime.now().plusMinutes(expire).toDate())</span><br><span class="line">                .signWith(privateKey, SignatureAlgorithm.RS256)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfo   载荷中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire     过期时间，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateTokenExpireInSeconds</span><span class="params">(Object userInfo, PrivateKey privateKey, <span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .claim(JWT_PAYLOAD_USER_KEY, JsonUtils.toString(userInfo))</span><br><span class="line">                .setId(createJTI())</span><br><span class="line">                .setExpiration(DateTime.now().plusSeconds(expire).toDate())</span><br><span class="line">                .signWith(privateKey, SignatureAlgorithm.RS256)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥解析token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Jws&lt;Claims&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Jws&lt;Claims&gt; <span class="title">parserToken</span><span class="params">(String token, PublicKey publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser().setSigningKey(publicKey).parseClaimsJws(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createJTI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(Base64.getEncoder().encode(UUID.randomUUID().toString().getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中的用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Payload&lt;T&gt; <span class="title">getInfoFromToken</span><span class="params">(String token, PublicKey publicKey, Class&lt;T&gt; userType)</span> </span>&#123;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = parserToken(token, publicKey);</span><br><span class="line">        Claims body = claimsJws.getBody();</span><br><span class="line">        Payload&lt;T&gt; claims = <span class="keyword">new</span> Payload&lt;&gt;();</span><br><span class="line">        claims.setId(body.getId());</span><br><span class="line">        claims.setUserInfo(JsonUtils.toBean(body.get(JWT_PAYLOAD_USER_KEY).toString(), userType));</span><br><span class="line">        claims.setExpiration(body.getExpiration());</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中的载荷信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Payload&lt;T&gt; <span class="title">getInfoFromToken</span><span class="params">(String token, PublicKey publicKey)</span> </span>&#123;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = parserToken(token, publicKey);</span><br><span class="line">        Claims body = claimsJws.getBody();</span><br><span class="line">        Payload&lt;T&gt; claims = <span class="keyword">new</span> Payload&lt;&gt;();</span><br><span class="line">        claims.setId(body.getId());</span><br><span class="line">        claims.setExpiration(body.getExpiration());</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RsaUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 波波烤鸭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_KEY_SIZE = <span class="number">2048</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中读取公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 公钥保存路径，相对于classpath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 公钥对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title">getPublicKey</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = readFile(filename);</span><br><span class="line">        <span class="keyword">return</span> getPublicKey(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中读取密钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 私钥保存路径，相对于classpath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 私钥对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title">getPrivateKey</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = readFile(filename);</span><br><span class="line">        <span class="keyword">return</span> getPrivateKey(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 公钥的字节形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PublicKey <span class="title">getPublicKey</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        bytes = Base64.getDecoder().decode(bytes);</span><br><span class="line">        X509EncodedKeySpec spec = <span class="keyword">new</span> X509EncodedKeySpec(bytes);</span><br><span class="line">        KeyFactory factory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> factory.generatePublic(spec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取密钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 私钥的字节形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PrivateKey <span class="title">getPrivateKey</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException </span>&#123;</span><br><span class="line">        bytes = Base64.getDecoder().decode(bytes);</span><br><span class="line">        PKCS8EncodedKeySpec spec = <span class="keyword">new</span> PKCS8EncodedKeySpec(bytes);</span><br><span class="line">        KeyFactory factory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> factory.generatePrivate(spec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据密文，生存rsa公钥和私钥,并写入指定文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKeyFilename  公钥文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKeyFilename 私钥文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret             生成密钥的密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateKey</span><span class="params">(String publicKeyFilename, String privateKeyFilename, String secret, <span class="keyword">int</span> keySize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        SecureRandom secureRandom = <span class="keyword">new</span> SecureRandom(secret.getBytes());</span><br><span class="line">        keyPairGenerator.initialize(Math.max(keySize, DEFAULT_KEY_SIZE), secureRandom);</span><br><span class="line">        KeyPair keyPair = keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="comment">// 获取公钥并写出</span></span><br><span class="line">        <span class="keyword">byte</span>[] publicKeyBytes = keyPair.getPublic().getEncoded();</span><br><span class="line">        publicKeyBytes = Base64.getEncoder().encode(publicKeyBytes);</span><br><span class="line">        writeFile(publicKeyFilename, publicKeyBytes);</span><br><span class="line">        <span class="comment">// 获取私钥并写出</span></span><br><span class="line">        <span class="keyword">byte</span>[] privateKeyBytes = keyPair.getPrivate().getEncoded();</span><br><span class="line">        privateKeyBytes = Base64.getEncoder().encode(privateKeyBytes);</span><br><span class="line">        writeFile(privateKeyFilename, privateKeyBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readFile(String fileName) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> Files.readAllBytes(<span class="keyword">new</span> File(fileName).toPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String destPath, <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File dest = <span class="keyword">new</span> File(destPath);</span><br><span class="line">        <span class="keyword">if</span> (!dest.exists()) &#123;</span><br><span class="line">            dest.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        Files.write(dest.toPath(), bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103</span></span><br><span class="line">在通用子模块中编写测试类生成rsa公钥和私钥</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 11:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String privateKey = <span class="string">"c:/tools/auth_key/id_key_rsa"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String publicKey = <span class="string">"c:/tools/auth_key/id_key_rsa.pub"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        RsaUtils.generateKey(publicKey,privateKey,<span class="string">"dpb"</span>,<span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/95272021042143/5.png" alt title="点击放大"></p><h5 id="4-2-3-认证系统创建"><a href="#4-2-3-认证系统创建" class="headerlink" title="4.2.3 认证系统创建"></a>4.2.3 认证系统创建</h5><p>接下来我们创建我们的认证服务。<br><img src="/2020/95272021042143/6.jpg" alt title="点击放大"><br>导入相关的依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;artifactId&gt;security-jwt-common&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.dpb&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/srm</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.dpb.domain</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.dpb:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">rsa:</span></span><br><span class="line">  <span class="attr">key:</span></span><br><span class="line">    <span class="attr">pubKeyFile:</span> <span class="string">c:\tools\auth_key\id_key_rsa.pub</span></span><br><span class="line">    <span class="attr">priKeyFile:</span> <span class="string">c:\tools\auth_key\id_key_rsa</span></span><br></pre></td></tr></table></figure><p><img src="/2020/95272021042143/7.png" alt title="点击放大"></p><h5 id="提供公钥私钥的配置类"><a href="#提供公钥私钥的配置类" class="headerlink" title="提供公钥私钥的配置类"></a>提供公钥私钥的配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dpb.utils.RsaUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 11:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"rsa.key"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaKeyProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyFile;</span><br><span class="line">    <span class="keyword">private</span> String priKeyFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统启动的时候触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createRsaKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        publicKey = RsaUtils.getPublicKey(pubKeyFile);</span><br><span class="line">        privateKey = RsaUtils.getPrivateKey(priKeyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 启动类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 11:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.dpb.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(RsaKeyProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="完成数据认证的逻辑"><a href="#完成数据认证的逻辑" class="headerlink" title="完成数据认证的逻辑"></a>完成数据认证的逻辑</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 15:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RolePojo</span> <span class="keyword">implements</span> <span class="title">GrantedAuthority</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 11:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPojo</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;RolePojo&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; auth = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        auth.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ADMIN"</span>));</span><br><span class="line">        <span class="keyword">return</span> auth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserPojo <span class="title">queryByUserName</span><span class="params">(@Param(<span class="string">"userName"</span>)</span> String userName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dpb.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByUserName"</span> <span class="attr">resultType</span>=<span class="string">"UserPojo"</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;userName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        UserPojo user = mapper.queryByUserName(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义认证过滤器"><a href="#自定义认证过滤器" class="headerlink" title="自定义认证过滤器"></a>自定义认证过滤器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dpb.config.RsaKeyProperties;</span><br><span class="line"><span class="keyword">import</span> com.dpb.domain.RolePojo;</span><br><span class="line"><span class="keyword">import</span> com.dpb.domain.UserPojo;</span><br><span class="line"><span class="keyword">import</span> com.dpb.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.agent.builder.AgentBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 11:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenLoginFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="keyword">private</span> RsaKeyProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenLoginFilter</span><span class="params">(AuthenticationManager authenticationManager, RsaKeyProperties prop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">        <span class="keyword">this</span>.prop = prop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UserPojo sysUser = <span class="keyword">new</span> ObjectMapper().readValue(request.getInputStream(), UserPojo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(sysUser.getUsername(), sysUser.getPassword());</span><br><span class="line">            <span class="keyword">return</span> authenticationManager.authenticate(authRequest);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">                PrintWriter out = response.getWriter();</span><br><span class="line">                Map resultMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">                resultMap.put(<span class="string">"code"</span>, HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">                resultMap.put(<span class="string">"msg"</span>, <span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">                out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(resultMap));</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception outEx)&#123;</span><br><span class="line">                outEx.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        UserPojo user = <span class="keyword">new</span> UserPojo();</span><br><span class="line">        user.setUsername(authResult.getName());</span><br><span class="line">        user.setRoles((List&lt;RolePojo&gt;)authResult.getAuthorities());</span><br><span class="line">        String token = JwtUtils.generateTokenExpireInMinutes(user, prop.getPrivateKey(), <span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">        response.addHeader(<span class="string">"Authorization"</span>, <span class="string">"Bearer "</span>+token);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line">            Map resultMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">            resultMap.put(<span class="string">"code"</span>, HttpServletResponse.SC_OK);</span><br><span class="line">            resultMap.put(<span class="string">"msg"</span>, <span class="string">"认证通过！"</span>);</span><br><span class="line">            out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(resultMap));</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception outEx)&#123;</span><br><span class="line">            outEx.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义校验token的过滤器"><a href="#自定义校验token的过滤器" class="headerlink" title="自定义校验token的过滤器"></a>自定义校验token的过滤器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dpb.config.RsaKeyProperties;</span><br><span class="line"><span class="keyword">import</span> com.dpb.domain.Payload;</span><br><span class="line"><span class="keyword">import</span> com.dpb.domain.UserPojo;</span><br><span class="line"><span class="keyword">import</span> com.dpb.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.www.BasicAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 12:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenVerifyFilter</span>  <span class="keyword">extends</span> <span class="title">BasicAuthenticationFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RsaKeyProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenVerifyFilter</span><span class="params">(AuthenticationManager authenticationManager, RsaKeyProperties prop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authenticationManager);</span><br><span class="line">        <span class="keyword">this</span>.prop = prop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        String header = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">        <span class="keyword">if</span> (header == <span class="keyword">null</span> || !header.startsWith(<span class="string">"Bearer "</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果携带错误的token，则给用户提示请登录！</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line">            Map resultMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">            resultMap.put(<span class="string">"code"</span>, HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">            resultMap.put(<span class="string">"msg"</span>, <span class="string">"请登录！"</span>);</span><br><span class="line">            out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(resultMap));</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果携带了正确格式的token要先得到token</span></span><br><span class="line">            String token = header.replace(<span class="string">"Bearer "</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="comment">//验证tken是否正确</span></span><br><span class="line">            Payload&lt;UserPojo&gt; payload = JwtUtils.getInfoFromToken(token, prop.getPublicKey(), UserPojo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            UserPojo user = payload.getUserInfo();</span><br><span class="line">            <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                UsernamePasswordAuthenticationToken authResult = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUsername(), <span class="keyword">null</span>, user.getAuthorities());</span><br><span class="line">                SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写SpringSecurity的配置类"><a href="#编写SpringSecurity的配置类" class="headerlink" title="编写SpringSecurity的配置类"></a>编写SpringSecurity的配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dpb.filter.TokenLoginFilter;</span><br><span class="line"><span class="keyword">import</span> com.dpb.filter.TokenVerifyFilter;</span><br><span class="line"><span class="keyword">import</span> com.dpb.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 12:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(securedEnabled=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span>   <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RsaKeyProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定认证对象的来源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService).passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//SpringSecurity配置信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf()</span><br><span class="line">                .disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/user/query"</span>).hasAnyRole(<span class="string">"ADMIN"</span>)</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .addFilter(<span class="keyword">new</span> TokenLoginFilter(<span class="keyword">super</span>.authenticationManager(), prop))</span><br><span class="line">                .addFilter(<span class="keyword">new</span> TokenVerifyFilter(<span class="keyword">super</span>.authenticationManager(), prop))</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h5><p><img src="/2020/95272021042143/8.png" alt title="点击放大"></p><p>通过Postman来访问测试<br><img src="/2020/95272021042143/9.png" alt title="点击放大"><br><img src="/2020/95272021042143/10.png" alt title="点击放大"></p><p>根据token信息我们访问其他资源<br><img src="/2020/95272021042143/11.png" alt title="点击放大"></p><h5 id="4-2-4-资源系统创建"><a href="#4-2-4-资源系统创建" class="headerlink" title="4.2.4 资源系统创建"></a>4.2.4 资源系统创建</h5><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>资源服务可以有很多个，这里只拿产品服务为例，记住，资源服务中只能通过公钥验证认证。不能签发token！创建产品服务并导入jar包根据实际业务导包即可，咱们就暂时和认证服务一样了。<br>接下来我们再创建一个资源服务<br><img src="/2020/95272021042143/12.jpg" alt title="点击放大"></p><h5 id="导入相关的依赖"><a href="#导入相关的依赖" class="headerlink" title="导入相关的依赖"></a>导入相关的依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>security-jwt-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dpb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写产品服务配置文件"><a href="#编写产品服务配置文件" class="headerlink" title="编写产品服务配置文件"></a>编写产品服务配置文件</h5><p>切记这里只能有公钥地址！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/srm</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.dpb.domain</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.dpb:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">rsa:</span></span><br><span class="line">  <span class="attr">key:</span></span><br><span class="line">    <span class="attr">pubKeyFile:</span> <span class="string">c:\tools\auth_key\id_key_rsa.pub</span></span><br></pre></td></tr></table></figure><h5 id="编写读取公钥的配置类"><a href="#编写读取公钥的配置类" class="headerlink" title="编写读取公钥的配置类"></a>编写读取公钥的配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dpb.utils.RsaUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 11:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"rsa.key"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaKeyProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统启动的时候触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createRsaKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        publicKey = RsaUtils.getPublicKey(pubKeyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dpb.config.RsaKeyProperties;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 17:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.dpb.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(RsaKeyProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="复制认证服务中，用户对象，角色对象和校验认证的接口"><a href="#复制认证服务中，用户对象，角色对象和校验认证的接口" class="headerlink" title="复制认证服务中，用户对象，角色对象和校验认证的接口"></a>复制认证服务中，用户对象，角色对象和校验认证的接口</h5><p>复制认证服务中的相关内容即可</p><h5 id="复制认证服务中SpringSecurity配置类做修改"><a href="#复制认证服务中SpringSecurity配置类做修改" class="headerlink" title="复制认证服务中SpringSecurity配置类做修改"></a>复制认证服务中SpringSecurity配置类做修改</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dpb.filter.TokenVerifyFilter;</span><br><span class="line"><span class="keyword">import</span> com.dpb.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 12:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(securedEnabled=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span>   <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RsaKeyProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定认证对象的来源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService).passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//SpringSecurity配置信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf()</span><br><span class="line">                .disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">//.antMatchers("/user/query").hasAnyRole("USER")</span></span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .addFilter(<span class="keyword">new</span> TokenVerifyFilter(<span class="keyword">super</span>.authenticationManager(), prop))</span><br><span class="line">                <span class="comment">// 禁用掉session</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉“增加自定义认证过滤器”即可！</p><h5 id="编写产品处理器"><a href="#编写产品处理器" class="headerlink" title="编写产品处理器"></a>编写产品处理器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dpb.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.annotation.Secured;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springboot-54-security-jwt-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 波波烤鸭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-12-03 11:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"update"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p><img src="/2020/95272021042143/13.png" alt title="点击放大"></p><blockquote><p>本文转载自<a href="https://www.toutiao.com/i6905266955822088717/" target="_blank" rel="noopener">Java码农之路</a>头条，原文连接点<a href="https://www.toutiao.com/i6905266955822088717/" target="_blank" rel="noopener">这里</a>，版权归原作者所有，转载目的是为了避免以后找不到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-什么是单点登陆&quot;&gt;&lt;a href=&quot;#1-什么是单点登陆&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是单点登陆&quot;&gt;&lt;/a&gt;1. 什么是单点登陆&lt;/h4&gt;&lt;p&gt;单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业
      
    
    </summary>
    
    
      <category term="SPRING" scheme="http://huermosi.xyz/categories/SPRING/"/>
    
      <category term="SPRING SECURITY" scheme="http://huermosi.xyz/categories/SPRING/SPRING-SECURITY/"/>
    
    
      <category term="SPRING" scheme="http://huermosi.xyz/tags/SPRING/"/>
    
      <category term="SSO" scheme="http://huermosi.xyz/tags/SSO/"/>
    
      <category term="JWT" scheme="http://huermosi.xyz/tags/JWT/"/>
    
      <category term="SPRING BOOT" scheme="http://huermosi.xyz/tags/SPRING-BOOT/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 5.7 JSON 数据类型使用总结</title>
    <link href="http://huermosi.xyz/2019/95270310102638/"/>
    <id>http://huermosi.xyz/2019/95270310102638/</id>
    <published>2019-12-10T02:26:38.000Z</published>
    <updated>2021-04-08T08:49:31.698Z</updated>
    
    <content type="html"><![CDATA[<h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><p><a href="#introduction">一、JSON数据类型简介</a><br><a href="#example">二、简单使用示例</a><br><a href="#prepare">数据准备</a><br><a href="#query">数据查询</a><br><a href="#modify">数据修改</a><br><a href="#other-funcs">其他函数</a><br><a href="#summary">总结</a><br><a href="#json-funcs-list">三、JSON函数概览</a></p><h4 id="一、JSON数据类型简介"><a href="#一、JSON数据类型简介" class="headerlink" title="一、JSON数据类型简介"></a><a name="introduction" style="color: inherit">一、JSON数据类型简介</a></h4><p>从版本5.7.8开始，mysql开始支持json数据类型，json数据类型存储时会做格式检验，不满足json格式会报错，json数据类型默认值不允许为空。</p><h4 id="二、简单使用示例"><a href="#二、简单使用示例" class="headerlink" title="二、简单使用示例"></a><a name="example" style="color: inherit">二、简单使用示例</a></h4><h5 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a><a name="prepare" style="color: inherit">数据准备</a></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> json_tab</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> primary <span class="keyword">key</span> auto_increment <span class="keyword">comment</span> <span class="string">'主键'</span>,</span><br><span class="line">  json_info <span class="keyword">json</span> <span class="keyword">comment</span> <span class="string">'json数据'</span>,</span><br><span class="line">  json_id <span class="built_in">int</span> <span class="keyword">generated</span> <span class="keyword">always</span> <span class="keyword">as</span> (json_info -&gt; <span class="string">'$.id'</span>) <span class="keyword">comment</span> <span class="string">'json数据的虚拟字段'</span>,</span><br><span class="line">  <span class="keyword">index</span> json_info_id_idx (json_id)</span><br><span class="line">) <span class="keyword">comment</span> <span class="string">'json示例表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> json_tab(json_info) <span class="keyword">values</span> (<span class="string">'&#123;"id": 1, "name": "张三", "age": 18, "sister": [&#123;"name": "张大姐", "age": 30&#125;, &#123;"name": "张二姐", "age": 20&#125;]&#125;'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> json_tab(json_info) <span class="keyword">values</span> (JSON_OBJECT(<span class="string">'id'</span>, <span class="number">2</span>, <span class="string">'name'</span>, <span class="string">'李四'</span>, <span class="string">'age'</span>, <span class="number">18</span>, <span class="string">'sister'</span>, JSON_ARRAY(JSON_OBJECT(<span class="string">'name'</span>, <span class="string">'李大姐'</span>, <span class="string">'age'</span>, <span class="number">28</span>), JSON_OBJECT(<span class="string">'name'</span>, <span class="string">'李二姐'</span>, <span class="string">'age'</span>, <span class="number">25</span>))));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> json_tab(json_info) <span class="keyword">values</span> (<span class="string">'&#123;"id": 3, "name": "小明", "age": 18, "sister": [&#123;"name": "小明大姐", "age": 25, "friend": [&#123;"name": "大姐朋友一", "age": 25&#125;, &#123;"name": "大姐朋友二", "age": 25&#125;]&#125;, &#123;"name": "小明二姐", "age": 20, "friend": [&#123;"name": "二姐朋友一", "age": 22&#125;, &#123;"name": "二姐朋友二", "age": 21&#125;]&#125;]&#125;'</span>);</span><br></pre></td></tr></table></figure><p>json_id是虚拟列，插入数据时不需要往该字段插入值，json数据类型不能直接建立索引，需要通过建立虚拟列再将索引建在虚拟列上这样的方式来建立索引；</p><p>json字段插入数据时有两种方式，一种是直接插入满足json格式的字符串，不符合json格式的字符串插入时会报错；另一种是通过JSON_OBJECT、JSON_ARRAY这两个json函数先构建好json数据再插入。</p><h5 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a><a name="query" style="color: inherit">数据查询</a></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先看看数据，注意虚拟列json_id，未插入值确显示有值</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> json_tab <span class="keyword">order</span> <span class="keyword">by</span> json_id <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> json_tab <span class="keyword">where</span> json_info -&gt; <span class="string">'$.name'</span> = <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON_TYPE 函数判断JSON数据类型</span></span><br><span class="line"><span class="keyword">select</span> JSON_TYPE(json_info)               <span class="keyword">as</span> info_type,</span><br><span class="line">       JSON_TYPE(json_info -&gt; <span class="string">'$.age'</span>)    <span class="keyword">as</span> age_type,</span><br><span class="line">       JSON_TYPE(json_info -&gt; <span class="string">'$.name'</span>)   <span class="keyword">as</span> name_type,</span><br><span class="line">       JSON_TYPE(json_info -&gt; <span class="string">'$.sister'</span>) <span class="keyword">as</span> sister_type</span><br><span class="line"><span class="keyword">from</span> json_tab;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询姓名以及他们的年龄</span></span><br><span class="line"><span class="keyword">select</span> json_info -&gt; <span class="string">'$.name'</span> <span class="keyword">as</span> <span class="keyword">name</span>, json_info -&gt; <span class="string">'$.age'</span> <span class="keyword">as</span> age <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="keyword">select</span> json_info -&gt; <span class="string">'$**.name'</span> <span class="keyword">as</span> <span class="keyword">name</span>, json_info -&gt; <span class="string">'$**.age'</span> <span class="keyword">as</span> age <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="comment"># -&gt; 等价于 JSON_EXTRACT(column, path)</span></span><br><span class="line"><span class="keyword">select</span> JSON_EXTRACT(json_info, <span class="string">'$.name'</span>) <span class="keyword">as</span> <span class="keyword">name</span>, JSON_EXTRACT(json_info, <span class="string">'$.age'</span>) <span class="keyword">as</span> age <span class="keyword">from</span> json_tab;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉双引号</span></span><br><span class="line"><span class="keyword">select</span> json_info -&gt;&gt; <span class="string">'$.name'</span> <span class="keyword">as</span> <span class="keyword">name</span>, json_info -&gt; <span class="string">'$.age'</span> <span class="keyword">as</span> age <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="comment"># -&gt;&gt; 等价于 JSON_UNQUOTE(JSON_EXTRACT(column, path))</span></span><br><span class="line"><span class="keyword">select</span> JSON_UNQUOTE(JSON_EXTRACT(json_info, <span class="string">'$.name'</span>)) <span class="keyword">as</span> <span class="keyword">name</span>, JSON_EXTRACT(json_info, <span class="string">'$.age'</span>) <span class="keyword">as</span> age <span class="keyword">from</span> json_tab;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询姓名和他们的姐姐</span></span><br><span class="line"><span class="keyword">select</span> json_info -&gt;&gt; <span class="string">'$.name'</span> <span class="keyword">as</span> <span class="keyword">name</span>, json_info -&gt;&gt; <span class="string">'$.sister[*].name'</span> <span class="keyword">as</span> sisters <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="comment"># 查询姓名和他们的姐姐以及朋友</span></span><br><span class="line"><span class="keyword">select</span> json_info -&gt;&gt; <span class="string">'$.name'</span> <span class="keyword">as</span> <span class="keyword">name</span>, json_info -&gt;&gt; <span class="string">'$.sister[*].name'</span> <span class="keyword">as</span> sisters, json_info -&gt; <span class="string">'$**.friend[*].name'</span> <span class="keyword">as</span> friends <span class="keyword">from</span> json_tab;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询key</span></span><br><span class="line"><span class="comment"># JSON_KEYS(json_doc[, path])</span></span><br><span class="line"><span class="keyword">select</span> JSON_KEYS(json_info) <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="keyword">select</span> JSON_KEYS(json_info, <span class="string">'$.sister[1]'</span>) <span class="keyword">from</span> json_tab;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询名字是否存在</span></span><br><span class="line"><span class="comment"># JSON_CONTAINS(target, candidate[, path])</span></span><br><span class="line"><span class="keyword">select</span> JSON_CONTAINS(json_info, <span class="string">'"张三"'</span>, <span class="string">'$.name'</span>) <span class="keyword">from</span> json_tab;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询是否包含路径</span></span><br><span class="line"><span class="comment"># JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] ...)</span></span><br><span class="line"><span class="comment"># one 至少存在一个路径</span></span><br><span class="line"><span class="keyword">select</span> JSON_CONTAINS_PATH(json_info,<span class="string">'one'</span>, <span class="string">'$.name'</span>, <span class="string">'$.xxx'</span>) <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="comment"># all 所有路径都存在</span></span><br><span class="line"><span class="keyword">select</span> JSON_CONTAINS_PATH(json_info,<span class="string">'all'</span>, <span class="string">'$.name'</span>, <span class="string">'$**.friend'</span>) <span class="keyword">from</span> json_tab;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询字符串的路径</span></span><br><span class="line"><span class="comment"># JSON_SEARCH(json_doc, one_or_all, search_str[, escape_char[, path] ...])</span></span><br><span class="line"><span class="comment"># one 只匹配第一个</span></span><br><span class="line"><span class="keyword">select</span> JSON_SEARCH(json_info,<span class="string">'one'</span>, <span class="string">'张三'</span>) <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="keyword">select</span> JSON_SEARCH(json_info,<span class="string">'one'</span>, <span class="string">'%朋友%'</span>, <span class="literal">null</span>, <span class="string">'$**.name'</span>) <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="comment"># all 找到所有的路径</span></span><br><span class="line"><span class="keyword">select</span> JSON_SEARCH(json_info,<span class="string">'all'</span>, <span class="string">'%朋友_'</span>, <span class="string">'朋'</span>, <span class="string">'$**.name'</span>) <span class="keyword">from</span> json_tab;</span><br></pre></td></tr></table></figure><h5 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a><a name="modify" style="color: inherit">数据修改</a></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入json数组</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> json_tab(json_info) <span class="keyword">values</span> (<span class="string">'[1, &#123;"a": "b"&#125;, [2, "qwe"]]'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># json数组指定位置上追加数据，path可以不是数组元素，结果都是数组</span></span><br><span class="line"><span class="comment"># JSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> json_tab;</span><br><span class="line"><span class="keyword">select</span> JSON_ARRAY_APPEND(json_info, <span class="string">'$'</span>, <span class="number">1</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_ARRAY_APPEND(json_info, <span class="string">'$[0]'</span>, <span class="number">1</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_ARRAY_APPEND(json_info, <span class="string">'$[2]'</span>, <span class="number">1</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_ARRAY_APPEND(json_info, <span class="string">'$[1].a'</span>, <span class="number">1</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># json数组指定位置前插入数据，path必须是数组元素</span></span><br><span class="line"><span class="comment"># JSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)</span></span><br><span class="line"><span class="keyword">select</span> JSON_ARRAY_INSERT(json_info, <span class="string">'$[1]'</span>, <span class="number">1</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># json指定位置插入值，已存在的path忽略，类似map.putIfAbsent</span></span><br><span class="line"><span class="comment"># JSON_INSERT(json_doc, path, val[, path, val] ...)</span></span><br><span class="line"><span class="keyword">select</span> JSON_INSERT(json_info, <span class="string">'$[1].b'</span>, <span class="string">'bbb'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_INSERT(json_info, <span class="string">'$[2]'</span>, <span class="string">'aaa'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_INSERT(json_info, <span class="string">'$[3]'</span>, <span class="string">'aaa'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># json指定位置设置值，已存在的替换，不存在的新增，类似map.put</span></span><br><span class="line"><span class="comment"># JSON_SET(json_doc, path, val[, path, val] ...)</span></span><br><span class="line"><span class="keyword">select</span> JSON_SET(json_info, <span class="string">'$[1].b'</span>, <span class="string">'bbb'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_SET(json_info, <span class="string">'$[2]'</span>, <span class="string">'aaa'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_SET(json_info, <span class="string">'$[3]'</span>, <span class="string">'aaa'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># json指定位置替换值，已存在的替换，不存在的忽略，类似map.replace</span></span><br><span class="line"><span class="comment"># JSON_REPLACE(json_doc, path, val[, path, val] ...)</span></span><br><span class="line"><span class="keyword">select</span> JSON_REPLACE(json_info, <span class="string">'$[1].b'</span>, <span class="string">'bbb'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_REPLACE(json_info, <span class="string">'$[2]'</span>, <span class="string">'aaa'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_REPLACE(json_info, <span class="string">'$[3]'</span>, <span class="string">'aaa'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定位置元素</span></span><br><span class="line"><span class="comment"># JSON_REMOVE(json_doc, path[, path] ...)</span></span><br><span class="line"><span class="keyword">select</span> JSON_REMOVE(json_info, <span class="string">'$[1].a'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> JSON_REMOVE(json_info, <span class="string">'$[2]'</span>) <span class="keyword">from</span> json_tab <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br></pre></td></tr></table></figure><h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a><a name="other-funcs" style="color: inherit">其他函数</a></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询json数据的深度</span></span><br><span class="line"><span class="comment"># JSON_DEPTH(json_doc)</span></span><br><span class="line"><span class="keyword">select</span> JSON_DEPTH(json_info),json_info <span class="keyword">from</span> json_tab;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询json数据的长度</span></span><br><span class="line"><span class="comment"># JSON_LENGTH(json_doc[, path])</span></span><br><span class="line"><span class="keyword">select</span> JSON_LENGTH(json_info),json_info <span class="keyword">from</span> json_tab;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证字符串是否有效的json格式</span></span><br><span class="line"><span class="comment"># JSON_VALID(val)</span></span><br><span class="line"><span class="keyword">SELECT</span> JSON_VALID(<span class="string">'&#123;"a": 1&#125;'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> JSON_VALID(<span class="string">'hello'</span>), JSON_VALID(<span class="string">'"hello"'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON_QUOTE(string)</span></span><br><span class="line"><span class="keyword">SELECT</span> JSON_QUOTE(<span class="string">'null'</span>), JSON_QUOTE(<span class="string">'"null"'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> JSON_QUOTE(<span class="string">'[1, 2, 3]'</span>);</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a name="summary" style="color: inherit">总结</a></h5><p>路径不允许使用通配符的函数</p><ul><li>JSON_KEYS(json_doc[, path])</li><li>JSON_CONTAINS(target, candidate[, path])</li><li>JSON_ARRAY_APPEND(json_doc, path, val[, path, val] …)</li><li>JSON_INSERT(json_doc, path, val[, path, val] …)</li><li>JSON_REMOVE(json_doc, path[, path] …)</li><li>JSON_REPLACE(json_doc, path, val[, path, val] …)</li><li>JSON_SET(json_doc, path, val[, path, val] …)</li><li>JSON_LENGTH(json_doc[, path])</li></ul><p>5.7.22新增函数</p><ul><li>JSON_MERGE_PATCH</li><li>JSON_MERGE_PRESERVE</li><li>JSON_STORAGE_SIZE</li><li>JSON_PRETTY</li></ul><h4 id="三、JSON函数概览"><a href="#三、JSON函数概览" class="headerlink" title="三、JSON函数概览"></a><a name="json-funcs-list" style="color: inherit">三、JSON函数概览</a></h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-append" target="_blank" rel="noopener">JSON_APPEND()</a> (deprecated 5.7.9)</td><td>Append data to JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html#function_json-array" target="_blank" rel="noopener">JSON_ARRAY()</a></td><td>Create JSON array</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-array-append" target="_blank" rel="noopener">JSON_ARRAY_APPEND()</a></td><td>Append data to JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-array-insert" target="_blank" rel="noopener">JSON_ARRAY_INSERT()</a></td><td>Insert into JSON array</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html#operator_json-column-path" target="_blank" rel="noopener">-&gt;</a></td><td>Return value from JSON column after evaluating path; equivalent to JSON_EXTRACT().</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html#function_json-contains" target="_blank" rel="noopener">JSON_CONTAINS()</a></td><td>Whether JSON document contains specific object at path</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html#function_json-contains-path" target="_blank" rel="noopener">JSON_CONTAINS_PATH()</a></td><td>Whether JSON document contains any data at path</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html#function_json-depth" target="_blank" rel="noopener">JSON_DEPTH()</a></td><td>Maximum depth of JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html#function_json-extract" target="_blank" rel="noopener">JSON_EXTRACT()</a></td><td>Return data from JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html#operator_json-inline-path" target="_blank" rel="noopener">-&gt;&gt;</a></td><td>Return value from JSON column after evaluating path and unquoting the result; equivalent to JSON_UNQUOTE(JSON_EXTRACT()).</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-insert" target="_blank" rel="noopener">JSON_INSERT()</a></td><td>Insert data into JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html#function_json-keys" target="_blank" rel="noopener">JSON_KEYS()</a></td><td>Array of keys from JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html#function_json-length" target="_blank" rel="noopener">JSON_LENGTH()</a></td><td>Number of elements in JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-merge" target="_blank" rel="noopener">JSON_MERGE()</a> (deprecated 5.7.22)</td><td>Merge JSON documents, preserving duplicate keys. Deprecated synonym for JSON_MERGE_PRESERVE()</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-merge-patch" target="_blank" rel="noopener">JSON_MERGE_PATCH()</a></td><td>Merge JSON documents, replacing values of duplicate keys</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-merge-preserve" target="_blank" rel="noopener">JSON_MERGE_PRESERVE()</a></td><td>Merge JSON documents, preserving duplicate keys</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html#function_json-object" target="_blank" rel="noopener">JSON_OBJECT()</a></td><td>Create JSON object</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-utility-functions.html#function_json-pretty" target="_blank" rel="noopener">JSON_PRETTY()</a></td><td>Print a JSON document in human-readable format</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html#function_json-quote" target="_blank" rel="noopener">JSON_QUOTE()</a></td><td>Quote JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-remove" target="_blank" rel="noopener">JSON_REMOVE()</a></td><td>Remove data from JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-replace" target="_blank" rel="noopener">JSON_REPLACE()</a></td><td>Replace values in JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html#function_json-search" target="_blank" rel="noopener">JSON_SEARCH()</a></td><td>Path to value within JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-set" target="_blank" rel="noopener">JSON_SET()</a></td><td>Insert data into JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-utility-functions.html#function_json-storage-size" target="_blank" rel="noopener">JSON_STORAGE_SIZE()</a></td><td>Space used for storage of binary representation of a JSON document</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html#function_json-type" target="_blank" rel="noopener">JSON_TYPE()</a></td><td>Type of JSON value</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html#function_json-unquote" target="_blank" rel="noopener">JSON_UNQUOTE()</a></td><td>Unquote JSON value</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html#function_json-valid" target="_blank" rel="noopener">JSON_VALID()</a></td><td>Whether JSON value is valid</td></tr></tbody></table><blockquote><p>本文转载自<a href="https://blog.csdn.net/u011207553" target="_blank" rel="noopener">KevanLiu</a>博客，为避免原文链接失效找不到等原因转载到本博客，版权归原博主所有。<br>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href="https://blog.csdn.net/u011207553/article/details/88912219" target="_blank" rel="noopener">https://blog.csdn.net/u011207553/article/details/88912219</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;文章目录&quot;&gt;&lt;a href=&quot;#文章目录&quot; class=&quot;headerlink&quot; title=&quot;文章目录&quot;&gt;&lt;/a&gt;文章目录&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;#introduction&quot;&gt;一、JSON数据类型简介&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#example&quot;
      
    
    </summary>
    
    
      <category term="MYSQL" scheme="http://huermosi.xyz/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="http://huermosi.xyz/tags/MYSQL/"/>
    
      <category term="JSON" scheme="http://huermosi.xyz/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>【JVM从小白学成大佬】8.弄明白CMS和G1，就靠这一篇了</title>
    <link href="http://huermosi.xyz/2019/95270314183311/"/>
    <id>http://huermosi.xyz/2019/95270314183311/</id>
    <published>2019-10-25T10:33:11.000Z</published>
    <updated>2021-04-08T08:49:31.558Z</updated>
    
    <content type="html"><![CDATA[<p>在开始介绍CMS和G1前，我们可以剧透几点：</p><ul><li>根据不同分代的特点，收集器可能不同。有些收集器可以同时用于新生代和老年代，而有些时候，则需要分别为新生代或老年代选用合适的收集器。一般来说，新生代收集器的收集频率较高，应选用性能高效的收集器；而老年代收集器收集次数相对较少，对空间较为敏感，应当避免选择基于复制算法的收集器。</li><li>在垃圾收集执行的时刻，应用程序需要暂停运行。</li><li>可以串行收集，也可以并行收集。</li><li>如果能做到并发收集（应用程序不必暂停），那绝对是很妙的事情。</li><li>如果收集行为可控，那也是很妙的事情。</li></ul><p>CMS和G1作为垃圾收集器里的大杀器，是需要好好弄明白的，而且面试中也经常被问到。</p><p>希望大家带着下面的问题进行阅读，有目标的阅读，收获更多:</p><ol><li>为什么没有一种牛逼的收集器像银弹一样适配所有场景？</li><li>CMS的优点、缺点、适用场景？</li><li>为什么CMS只能用作老年代收集器，而不能应用在新生代的收集？</li><li>G1的优点、缺点、适用场景？</li></ol><h4 id="1-CMS收集器"><a href="#1-CMS收集器" class="headerlink" title="1 CMS收集器"></a>1 CMS收集器</h4><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。这是因为CMS收集器工作时，GC工作线程与用户线程可以并发执行，以此来达到降低收集停顿时间的目的。</p><p>CMS收集器仅作用于老年代的收集，是基于标记-清除算法的，它的运作过程分为4个步骤：</p><ul><li>初始标记（CMS initial mark）</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）</li><li>并发清除（CMS concurrent sweep）</li></ul><p>其中，初始标记、重新标记这两个步骤仍然需要Stop-the-world。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始阶段稍长一些，但远比并发标记的时间短。</p><blockquote><p>CMS以流水线方式拆分了收集周期，将耗时长的操作单元保持与应用线程并发执行。只将那些必需STW才能执行的操作单元单独拎出来，控制这些单元在恰当的时机运行，并能保证仅需短暂的时间就可以完成。这样，在整个收集周期内，只有两次短暂的暂停（初始标记和重新标记），达到了近似并发的目的。</p></blockquote><p>CMS收集器优点：</p><ul><li>并发收集</li><li>低停顿。</li></ul><p>CMS收集器缺点：</p><ul><li>CMS收集器对CPU资源非常敏感。</li><li>CMS收集器无法处理浮动垃圾（Floating Garbage）。</li><li>CMS收集器是基于标记-清除算法，该算法的缺点都有。</li></ul><p>CMS收集器之所以能够做到并发，根本原因在于采用基于“标记-清除”的算法并对算法过程进行了细粒度的分解。前面篇章介绍过标记-清除算法将产生大量的内存碎片这对新生代来说是难以接受的，因此新生代的收集器并未提供CMS版本。</p><p>另外要补充一点，JVM在暂停的时候，需要选准一个时机。由于JVM系统运行期间的复杂性，不可能做到随时暂停，因此引入了安全点的概念。</p><h5 id="安全点-Safepoint"><a href="#安全点-Safepoint" class="headerlink" title="安全点(Safepoint)"></a>安全点(Safepoint)</h5><p>安全点，即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。Safepoint的选定既不能太少以至于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。</p><p>安全点的初始目的并不是让其他线程停下，而是找到一个稳定的执行状态。在这个执行状态下，Java虚拟机的堆栈不会发生变化。这么一来，垃圾回收器便能够“安全”地执行可达性分析。只要不离开这个安全点，Java虚拟机便能够在垃圾回收的同时，继续运行这段本地代码。</p><p>程序运行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的。“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生Safepoint。</p><p>对于安全点，另一个需要考虑的问题就是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。</p><p>两种解决方案：</p><ul><li><p>抢先式中断（Preemptive Suspension）<br>抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。现在几乎没有虚拟机采用这种方式来暂停线程从而响应GC事件。</p></li><li><p>主动式中断（Voluntary Suspension）<br>主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</p></li></ul><h5 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h5><p>指在一段代码片段中，引用关系不会发生变化。在这个区域中任意地方开始GC都是安全的。也可以把Safe Region看作是被扩展了的Safepoint。</p><h4 id="2-G1收集器"><a href="#2-G1收集器" class="headerlink" title="2 G1收集器"></a>2 G1收集器</h4><p>G1重新定义了堆空间，打破了原有的分代模型，将堆划分为一个个区域。这么做的目的是在进行收集时不必在全堆范围内进行，这是它最显著的特点。区域划分的好处就是带来了停顿时间可预测的收集模型：用户可以指定收集操作在多长时间内完成。即G1提供了接近实时的收集特性。</p><p>G1与CMS的特征对比如下：</p><table><thead><tr><th>特征</th><th>G1</th><th>CMS</th></tr></thead><tbody><tr><td>并发和分代</td><td>是</td><td>是</td></tr><tr><td>最大化释放堆内存</td><td>是</td><td>否</td></tr><tr><td>低延时</td><td>是</td><td>是</td></tr><tr><td>吞吐量</td><td>高</td><td>低</td></tr><tr><td>压实</td><td>是</td><td>否</td></tr><tr><td>可预测性</td><td>强</td><td>弱</td></tr><tr><td>新生代和老年代的物理隔离</td><td>否</td><td>是</td></tr></tbody></table><p>G1具备如下特点：</p><ul><li>并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-the-world停顿的时间，部分其他收集器原来需要停顿Java线程执行的GC操作，G1收集器仍然可以通过并发的方式让Java程序继续运行。</li><li>分代收集</li><li>空间整合：与CMS的标记-清除算法不同，G1从整体来看是基于标记-整理算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的。但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</li><li>可预测的停顿：这是G1相对于CMS的一个优势，降低停顿时间是G1和CMS共同的关注点。</li></ul><p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。在堆的结构设计时，G1打破了以往将收集范围固定在新生代或老年代的模式，G1将堆分成许多相同大小的区域单元，每个单元称为Region。Region是一块地址连续的内存空间，G1模块的组成如下图所示：</p><p><img src="/2019/95270314183311/g1.png" alt="G1堆" title="点击放大"></p><p>G1收集器将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。Region的大小是一致的，数值是在1M到32M字节之间的一个2的幂值数，JVM会尽量划分2048个左右、同等大小的Region，这一点可以参看如下源码。其实这个数字既可以手动调整，G1也会根据堆大小自动进行调整。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SHARE_VM_GC_G1_HEAPREGIONBOUNDS_HPP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHARE_VM_GC_G1_HEAPREGIONBOUNDS_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"memory/allocation.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapRegionBounds</span> :</span> <span class="keyword">public</span> AllStatic &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// Minimum region size; we won't go lower than that.</span></span><br><span class="line">  <span class="comment">// We might want to decrease this in the future, to deal with small</span></span><br><span class="line">  <span class="comment">// heaps a bit more efficiently.</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> MIN_REGION_SIZE = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Maximum region size; we don't go higher than that. There's a good</span></span><br><span class="line">  <span class="comment">// reason for having an upper bound. We don't want regions to get too</span></span><br><span class="line">  <span class="comment">// large, otherwise cleanup's effectiveness would decrease as there</span></span><br><span class="line">  <span class="comment">// will be fewer opportunities to find totally empty regions after</span></span><br><span class="line">  <span class="comment">// marking.</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> MAX_REGION_SIZE = <span class="number">32</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The automatic region size calculation will try to have around this</span></span><br><span class="line">  <span class="comment">// many regions in the heap (based on the min heap size).</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> TARGET_REGION_NUMBER = <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">min_size</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">max_size</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">target_number</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SHARE_VM_GC_G1_HEAPREGIONBOUNDS_HPP</span></span></span><br></pre></td></tr></table></figure><p>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1会通过一个合理的计算模型，计算出每个Region的收集成本并量化，这样一来，收集器在给定了“停顿”时间限制的情况下，总是能选择一组恰当的Regions作为收集目标，让其收集开销满足这个限制条件，以此达到实时收集的目的。</p><p>对于打算从CMS或者ParallelOld收集器迁移过来的应用，按照<a href="https://www.oracle.com/technetwork/java/javase/tech/g1-intro-jsp-135488.html" target="_blank" rel="noopener">官方</a>的建议，如果发现符合如下特征，可以考虑更换成G1收集器以追求更佳性能：</p><ul><li>实时数据占用了超过半数的堆空间；</li><li>对象分配率或“晋升”的速度变化明显；</li><li>期望消除耗时较长的GC或停顿（超过0.5——1秒）。</li></ul><blockquote><p>原文如下：<br>Applications running today with either the CMS or the ParallelOld garbage collector would benefit switching to G1 if the application has one or more of the following traits.</p><ul><li>More than 50% of the Java heap is occupied with live data.</li><li>The rate of object allocation rate or promotion varies significantly.</li><li>Undesired long garbage collection or compaction pauses (longer than 0.5 to 1 second)</li></ul></blockquote><p>G1收集的运作过程大致如下：</p><ul><li>初始标记（Initial Marking）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。</li><li>并发标记（Concurrent Marking）：是从GC Roots开始堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。</li><li>最终标记（Final Marking）：是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收（Live Data Counting and Evacuation）：首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。这个阶段也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li></ul><p>全局变量和栈中引用的对象是可以列入根集合的，这样在寻找垃圾时，就可以从根集合出发扫描堆空间。在G1中，引入了一种新的能加入根集合的类型，就是记忆集（Remembered Set）。Remembered Sets（也叫RSets）用来跟踪对象引用。G1的很多开源都是源自Remembered Set，例如，它通常约占Heap大小的20%或更高。并且，我们进行对象复制的时候，因为需要扫描和更改Card Table的信息，这个速度影响了复制的速度，进而影响暂停时间。</p><p><img src="/2019/95270314183311/pic1.jpg" alt="记忆集" title="点击放大"></p><h5 id="卡表（Card-Table）"><a href="#卡表（Card-Table）" class="headerlink" title="卡表（Card Table）"></a>卡表（Card Table）</h5><p>有个场景，老年代的对象可能引用新生代的对象，那标记存活对象的时候，需要扫描老年代中的所有对象。因为该对象拥有对新生代对象的引用，那么这个引用也会被称为GC Roots。那不是得又做全堆扫描？成本太高了吧。</p><p>HotSpot给出的解决方案是一项叫做卡表（Card Table）的技术。该技术将整个堆划分为一个个大小为512字节的卡，并且维护一个卡表，用来存储每张卡的一个标识位。这个标识位代表对应的卡是否可能存有指向新生代对象的引用。如果可能存在，那么我们就认为这张卡是脏的。</p><p>在进行Minor GC的时候，我们便可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的对象加入到Minor GC的GC Roots里。当完成所有脏卡的扫描之后，Java虚拟机便会将所有脏卡的标识位清零。</p><p>想要保证每个可能有指向新生代对象引用的卡都被标记为脏卡，那么Java虚拟机需要截获每个引用型实例变量的写操作，并作出对应的写标识位操作。</p><p>卡表能用于减少老年代的全堆空间扫描，这能很大的提升GC效率。</p><p>我们可以看下官方文档对G1的展望（这段英文描述比较简单，我就不翻译了）：</p><blockquote><p>Future:<br>G1 is planned as the long term replacement for the Concurrent Mark-Sweep Collector (CMS). Comparing G1 with CMS, there are differences that make G1 a better solution. One difference is that G1 is a compacting collector.<br>G1 compacts sufficiently to completely avoid the use of fine-grained free lists for allocation, and instead relies on regions. This considerably simplifies parts of the collector, and mostly eliminates potential fragmentation issues. Also, G1 offers more predictable garbage collection pauses than the CMS collector, and allows users to specify desired pause targets.</p></blockquote><h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h4><p>查了下度娘有关G1的文章，绝大部分文章对G1的介绍都是停留在JDK7或更早期的实现很多结论已经存在较大偏差了，甚至一些过去的GC选项已经不再推荐使用。举个例子，JDK9中JVM和GC日志进行了重构，如PrintGCDetails已经被标记为废弃，而PrintGCDateStamps已经被移除，指定它会导致JVM无法启动。</p><p>本文对CMS和G1的介绍绝大部分内容也是基于JDK7，新版本中的内容有一点介绍，倒没做过多介绍（本人对新版本JVM还没有深入研究），后面有机会可以再出专门的文章来重点介绍。</p><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h4><p>《深入理解Java虚拟机》《HotSpot实战》《极客时间专栏》</p><blockquote><p>本文转载自<a href="https://www.cnblogs.com/heyonggang/" target="_blank" rel="noopener">猿人谷</a>博客，原文连接点<a href="https://www.cnblogs.com/heyonggang/p/11718170.html" target="_blank" rel="noopener">这里</a>，版权归原作者所有。<br>微信公众号：<a href="yuanrengu.jpg">猿人谷</a><br>如果您认为阅读这篇博客让您有些收获，不妨点击一下右下角的【推荐】<br>如果您希望与我交流互动，欢迎关注微信公众号<br>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开始介绍CMS和G1前，我们可以剧透几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据不同分代的特点，收集器可能不同。有些收集器可以同时用于新生代和老年代，而有些时候，则需要分别为新生代或老年代选用合适的收集器。一般来说，新生代收集器的收集频率较高，应选用性能高效的收集器；而老年代收
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://huermosi.xyz/categories/JAVA/"/>
    
      <category term="JVM" scheme="http://huermosi.xyz/categories/JAVA/JVM/"/>
    
    
      <category term="JAVA" scheme="http://huermosi.xyz/tags/JAVA/"/>
    
      <category term="JVM" scheme="http://huermosi.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>解决Docker容器内挂载目录无权限问题：cannot open directory. Permission denied</title>
    <link href="http://huermosi.xyz/2019/20200216210659/"/>
    <id>http://huermosi.xyz/2019/20200216210659/</id>
    <published>2019-10-06T13:06:59.000Z</published>
    <updated>2021-04-08T08:49:31.556Z</updated>
    
    <content type="html"><![CDATA[<p>将主机中的目录挂在到容器中后，进入到Docker容器内对应的目录，运行命令<code>ls</code>后提示权限不够：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls: cannot open directory .: Permission denied</span><br></pre></td></tr></table></figure><p>解决方法：<br>在docker run命令加上<code>--privileged=true</code>参数，给容器开启特权。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;将主机中的目录挂在到容器中后，进入到Docker容器内对应的目录，运行命令&lt;code&gt;ls&lt;/code&gt;后提示权限不够：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/categories/DOCKER/"/>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/tags/DOCKER/"/>
    
  </entry>
  
  <entry>
    <title>运行自己的Docker Registry</title>
    <link href="http://huermosi.xyz/2019/20200214123248/"/>
    <id>http://huermosi.xyz/2019/20200214123248/</id>
    <published>2019-10-06T04:32:48.000Z</published>
    <updated>2021-04-08T08:49:31.556Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们可能希望构建和存储包含不想被公开的信息或数据的镜像。这时候有两种选择。</p><ul><li>利用<code>Docker Hub</code>上的私有仓库。</li><li>运行自己的<code>Registry</code>。</li></ul><p>Docker公司开源了他们用于运行<code>Docker Registry</code>的代码，我们可以基于此代码在内部运行自己的<code>Registry</code>。</p><h4 id="从容器运行Registry"><a href="#从容器运行Registry" class="headerlink" title="从容器运行Registry"></a>从容器运行Registry</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 5001:5000 registry</span></span><br></pre></td></tr></table></figure><p>该命令将会启动一个运行Registry应用的容器，Registry应用运行在容器的<code>5000</code>端口，并将容器的<code>5000</code>端口绑定到本地宿主机的<code>5001</code>端口。</p><h4 id="使用新的Registry"><a href="#使用新的Registry" class="headerlink" title="使用新的Registry"></a>使用新的Registry</h4><p>下面我们将本地已经存在的镜像<code>huyaoban/static_web</code>上传到我们的新Registry上去。</p><ul><li><p>找到镜像的ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images huyaoban/static_web</span></span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">huyaoban/static_web   latest              9f98ad5f2a2f        3 days ago          152 MB</span><br></pre></td></tr></table></figure></li><li><p>给镜像打标签<br>镜像ID为<code>9f98ad5f2a2f</code>，并使用新的Registry给镜像打上标签。为了指定新的Registry目的地址，需要在镜像名前加上<code>主机名（也可以用IP）和端口</code>前缀。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker tag 9f98ad5f2a2f 127.0.0.1:5001/huyaoban/static_web</span></span><br></pre></td></tr></table></figure></li><li><p>push镜像到新的Registry</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker push 127.0.0.1:5001/huyaoban/static_web</span></span><br></pre></td></tr></table></figure></li><li><p>使用新的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -ti 127.0.0.1:5001/huyaoban/static_web</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候我们可能希望构建和存储包含不想被公开的信息或数据的镜像。这时候有两种选择。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用&lt;code&gt;Docker Hub&lt;/code&gt;上的私有仓库。&lt;/li&gt;
&lt;li&gt;运行自己的&lt;code&gt;Registry&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/categories/DOCKER/"/>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/tags/DOCKER/"/>
    
      <category term="REGISTRY" scheme="http://huermosi.xyz/tags/REGISTRY/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker构建静态网站</title>
    <link href="http://huermosi.xyz/2019/20200216212552/"/>
    <id>http://huermosi.xyz/2019/20200216212552/</id>
    <published>2019-10-05T13:25:52.000Z</published>
    <updated>2021-04-08T08:49:31.550Z</updated>
    
    <content type="html"><![CDATA[<p>将Docker作为本地Web开发环境是使用Docker的一个最简单的场景。这个环境可以完全重现生产环境，保证开发环境和部署环境一致。下面从将Nginx安装到容器来架构一个简单的网站开始。这个网站暂且命名为<code>Sample</code>。</p><h4 id="创建构建上下文目录，并创建初始化的Dockerfile文件"><a href="#创建构建上下文目录，并创建初始化的Dockerfile文件" class="headerlink" title="创建构建上下文目录，并创建初始化的Dockerfile文件"></a>创建构建上下文目录，并创建初始化的Dockerfile文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir sample</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> sample</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch Dockerfile</span></span><br></pre></td></tr></table></figure><h4 id="添加nginx配置"><a href="#添加nginx配置" class="headerlink" title="添加nginx配置"></a>添加nginx配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> sample</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mdkir nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch global.conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch nginx.conf</span></span><br></pre></td></tr></table></figure><p><code>global.conf</code>文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 0.0.0.0:80;</span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;html&#x2F;website;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;default_access.log;</span><br><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;default_error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nginx.conf</code>文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">user root;</span><br><span class="line">worker_processes 4;</span><br><span class="line">pid &#x2F;run&#x2F;nginx.pid;</span><br><span class="line">daemon off;</span><br><span class="line"></span><br><span class="line">events &#123;&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">  sendfile on;</span><br><span class="line">  tcp_nopush on;</span><br><span class="line">  tcp_nodelay on;</span><br><span class="line">  keepalive_timeout 65;</span><br><span class="line">  types_hash_max_size 2048;</span><br><span class="line">  include &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">  default_type application&#x2F;octet-stream;</span><br><span class="line">  access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;</span><br><span class="line">  error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_disable &quot;msie6&quot;;</span><br><span class="line">  include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加我们的静态网站，很简单，就一个index-html文件"><a href="#添加我们的静态网站，很简单，就一个index-html文件" class="headerlink" title="添加我们的静态网站，很简单，就一个index.html文件"></a>添加我们的静态网站，很简单，就一个<code>index.html</code>文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> sample</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mdkir website</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> website</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch index.html</span></span><br></pre></td></tr></table></figure><p><code>index.html</code>文件内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a test website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a test website<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="最后看一下我们的Dockerfile文件的内容"><a href="#最后看一下我们的Dockerfile文件的内容" class="headerlink" title="最后看一下我们的Dockerfile文件的内容"></a>最后看一下我们的Dockerfile文件的内容</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Jerry <span class="string">"xxxxx@163.com"</span></span><br><span class="line"><span class="keyword">ENV</span> REFRESHED_AT <span class="number">2019</span>-<span class="number">02</span>-<span class="number">15</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -y -q install nginx</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /var/www/html</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx/global.conf /etc/nginx/conf.d/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx/nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>所有文件准备好后，我们开始构建镜像，并取名为<code>huyaoban/nginx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> sample</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t huyaoban/nginx .</span></span><br></pre></td></tr></table></figure><h4 id="使用构建成功的镜像创建容器"><a href="#使用构建成功的镜像创建容器" class="headerlink" title="使用构建成功的镜像创建容器"></a>使用构建成功的镜像创建容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> sample</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 80 --privileged=<span class="literal">true</span> --name website -v <span class="variable">$PWD</span>/website:/var/www/html/website huyaoban/nginx nginx</span></span><br></pre></td></tr></table></figure><p>这里使用<code>-v</code>参数将宿主机构建上下文的<code>website</code>目录挂载到容器的<code>/var/www/html/website</code>目录。在nginx的配置里，已经指定了这个目录为nginx服务器的工作目录。</p><p>查看容器<code>80</code>端口绑定的宿主机端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker port 8830a464f0c2 80</span></span><br><span class="line">0.0.0.0:32773</span><br></pre></td></tr></table></figure><p>访问宿主机的<code>32773</code>端口试试，打开的就是Sample网站。<br>由于我们已经将构建上下文的<code>website</code>目录挂在到了容器中，直接修改构建上下文<code>website</code>中的<code>index.html</code>文件，Sample网站会自动更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;将Docker作为本地Web开发环境是使用Docker的一个最简单的场景。这个环境可以完全重现生产环境，保证开发环境和部署环境一致。下面从将Nginx安装到容器来架构一个简单的网站开始。这个网站暂且命名为&lt;code&gt;Sample&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;创建
      
    
    </summary>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/categories/DOCKER/"/>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/tags/DOCKER/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile指令</title>
    <link href="http://huermosi.xyz/2019/20200212221849/"/>
    <id>http://huermosi.xyz/2019/20200212221849/</id>
    <published>2019-10-04T14:18:49.000Z</published>
    <updated>2021-04-08T08:49:31.557Z</updated>
    
    <content type="html"><![CDATA[<p>Dockerfile由一系列的指令和参数组成。每条指令，如FROM，都必须为大写字母。Dockerfile中的指令会按顺序从上到下执行，所以应该根据需要合理安排指令的顺序。Dockerfile中可以放入很多指令，这些指令包括<a href="#cmd"><code>CMD</code></a>、<a href="#entrypoint"><code>ENTRYPOINT</code></a>、<a href="#add"><code>ADD</code></a>、<a href="#copy"><code>COPY</code></a>、<a href="#volume"><code>VOLUME</code></a>、<a href="#workdir"><code>WORKDIR</code></a>、<a href="#user"><code>USER</code></a>、<a href="#onbuild"><code>ONBUILD</code></a>、<a href="#env"><code>ENV</code></a>、<a href="#from"><code>FROM</code></a>、<a href="#maintainer"><code>MAINTAINER</code></a>、<a href="#run"><code>RUN</code></a>和<a href="#expose"><code>EXPOSE</code></a>等。可以在<a href="http://docs.docker.com/reference/builder/" target="_blank" rel="noopener">http://docs.docker.com/reference/builder/</a>查看Dockerfile中可以使用的全部指令清单。</p><h4 id="1-CMD"><a href="#1-CMD" class="headerlink" title="1. CMD"></a><a name="cmd" style="color: inherit">1. CMD</a></h4><p>CMD指令用于指定一个容器启动时要运行的命令。<br>docker run中指定的命令会覆盖CMD中的命令。<br>如果Dockerfile中有多条CMD指令，只有最后一条有效。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>, <span class="string">"-l"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="2-ENTRYPOINT"><a href="#2-ENTRYPOINT" class="headerlink" title="2. ENTRYPOINT"></a><a name="entrypoint" style="color: inherit">2. ENTRYPOINT</a></h4><p>会使CMD指令失效。<br>docker run命令行中的任何参数都会被当作参数再次传递给ENTRYPOINT指令中指定的命令。<br>如果docker run命令行中没有指定参数，则会把CMD中的命令传给ENTRYPOINT。<br>可在docker run中用<code>--entrypoint</code>覆盖ENTRYPOINT指令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/usr/sbin/nginx"</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/usr/sbin/nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="3-WORKDIR"><a href="#3-WORKDIR" class="headerlink" title="3. WORKDIR"></a><a name="workdir" style="color: inherit">3. WORKDIR</a></h4><p>WORKDIR指令用来为容器设置工作目录，也可以为Dockerfile中的一系列指令设置工作目录。<br>ENTRYPOINT和CMD指定的程序会在这个目录下执行。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/webapp/db</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bundle install</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/webapp</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"rackup"</span>]</span></span><br></pre></td></tr></table></figure><p>可在docker run中用<code>-w</code>标志在运行时覆盖工作目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -ti -w /var/<span class="built_in">log</span> ubuntu <span class="built_in">pwd</span></span></span><br><span class="line">/var/log</span><br></pre></td></tr></table></figure><h4 id="4-ENV"><a href="#4-ENV" class="headerlink" title="4. ENV"></a><a name="env" style="color: inherit">4. ENV</a></h4><p>ENV指令用来在镜像构建过程中设置环境变量。<br>这些环境变量也会被持久保存到从我们的镜像创建的任何容器中。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> TARGET_DIR /opt/app</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$TARGET_DIR</span></span></span><br></pre></td></tr></table></figure><p>在docker run中可用<code>-e</code>标志来传递环境变量，这些变量只会在运行时有效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -ti -e <span class="string">"WEB_PORT=8080"</span> ubuntu env</span></span><br><span class="line">WEB_PORT=8080</span><br></pre></td></tr></table></figure><h4 id="5-USER"><a href="#5-USER" class="headerlink" title="5. USER"></a><a name="user" style="color: inherit">5. USER</a></h4><p>USER指令用来指定该镜像会以什么样的用户去运行。如果不通过USER指令指定用户，默认用户为<code>root</code>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> nginx</span><br></pre></td></tr></table></figure><p>基于该镜像启动的容器会以<code>nginx</code>用户的身份来运行。</p><p>可用如下方式指定用户。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> username</span><br><span class="line"><span class="keyword">USER</span> username:group</span><br><span class="line"><span class="keyword">USER</span> uid</span><br><span class="line"><span class="keyword">USER</span> uid:gid</span><br><span class="line"><span class="keyword">USER</span> username:gid</span><br><span class="line"><span class="keyword">USER</span> uid:group</span><br></pre></td></tr></table></figure><p>在docker run中可以用<code>-u</code>标志来覆盖该指令的值。</p><h4 id="6-VOLUME"><a href="#6-VOLUME" class="headerlink" title="6. VOLUME"></a><a name="volume" style="color: inherit">6. VOLUME</a></h4><p>VOLUME指令用来向基于镜像创建的容器添加卷。当我们因为某种原因不想把某些数据构建到镜像中，但是又希望在使用这个镜像启动的容器中使用这些数据，可以通过卷把数据挂在到容器中去。</p><p>一个卷是可以存在于一个或者多个容器内的特定的目录。其有如下特性：</p><ul><li>卷可以在容器间共享和重用。</li><li>对卷的修改是立即生效的。</li><li>对卷的修改不会对镜像产生影响。</li><li>卷会一直存在知道没有任何容器再使用它。</li></ul><p>卷功能让我们可以将数据（源代码）、数据库或者其他内容添加到镜像中而不是将这些内容提交到镜像中，并允许我们在多个容器间共享这些内容。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/opt/project"</span>, <span class="string">"/data"</span>]</span></span><br></pre></td></tr></table></figure><p>这条指令将会为基于此镜像创建的任何容器创建一个名为<code>/opt/project</code>和<code>/data</code>的挂载点。</p><p>在docker run中可以用<code>-v</code>标志来为容器挂在卷。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 80 --name website -v <span class="variable">$PWD</span>/website:/var/www/html/website huyaoban/nginx nginx</span></span><br></pre></td></tr></table></figure><p>把宿主机的<code>$PWD/website</code>目录挂载到容器的<code>/var/www/html/website</code>目录。</p><p>更多关于卷的信息可以访问<a href="http://docs.docker.com/userguide/dockervolumes/" target="_blank" rel="noopener">http://docs.docker.com/userguide/dockervolumes/</a></p><h4 id="7-ADD"><a href="#7-ADD" class="headerlink" title="7. ADD"></a><a name="add" style="color: inherit">7. ADD</a></h4><p>ADD指令用来将构建环境下的文件和目录复制到镜像中。如果目的位置不存在，自动创建全路径目录，文件和目录权限为<code>0755</code>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> software.lic /opt/application/software.lic</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> http://wordpress.org/latest.zip /root/wordpress.zip</span></span><br></pre></td></tr></table></figure><p>如果目的地址以<code>/</code>结尾，那么Docker就认为源位置指向的是目录；如果目的地址不是以<code>/</code>结尾，那么Docker就认为源位置指向的是文件。文件源也可以是<code>URL</code>格式。</p><p>将构建环境中的<code>latest.tar.gz</code>解压到镜像的<code>/var/www/wordpress/</code>目录下。目录下已存在的文件不会被覆盖。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> latest.tar.gz /var/www/wordpress/</span></span><br></pre></td></tr></table></figure><p>归档文件解压特性只针对本地构建环境中的文件，<code>URL</code>方式的归档文件不会解压。</p><h4 id="8-COPY"><a href="#8-COPY" class="headerlink" title="8. COPY"></a><a name="copy" style="color: inherit">8. COPY</a></h4><p>COPY指令用于复制构建上下文中的文件到镜像中，不做提取和解压。目的位置不存在时自动创建，目的位置必须是容器内的一个绝对路径。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> conf.d/ /etc/apache2/</span></span><br></pre></td></tr></table></figure><p>将构建环境中<code>conf.d</code>目录中的文件复制到镜像的<code>/etc/apache2/</code>目录中。</p><h4 id="9-ONBUILD"><a href="#9-ONBUILD" class="headerlink" title="9. ONBUILD"></a><a name="onbuild" style="color: inherit">9. ONBUILD</a></h4><p>ONBUILD指令能为镜像添加触发器。当一个镜像被用做其他镜像的基础镜像时，该镜像中的触发器将会被执行。触发器会在构建过程中插入新指令，可认为这些指令是紧跟<code>FROM</code>之后指定的。</p><p>ONBUILD触发器只会在子镜像中执行，不会在孙子镜像中执行。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">ADD</span><span class="bash"> . /app/src</span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /app/src &amp;&amp; make</span></span><br></pre></td></tr></table></figure><h4 id="10-FROM"><a href="#10-FROM" class="headerlink" title="10. FROM"></a><a name="from" style="color: inherit">10. FROM</a></h4><p>FROM指令用于从某个基础镜像构建另外一个镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">FROM</span> huyaoban/centos-web</span><br></pre></td></tr></table></figure><h4 id="11-MAINTAINER"><a href="#11-MAINTAINER" class="headerlink" title="11. MAINTAINER"></a><a name="maintainer" style="color: inherit">11. MAINTAINER</a></h4><p>MAINTAINER指令用于设置镜像的维护者信息。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> Jerry <span class="string">"xxxxx@163.com"</span></span><br></pre></td></tr></table></figure><h4 id="12-RUN"><a href="#12-RUN" class="headerlink" title="12. RUN"></a><a name="run" style="color: inherit">12. RUN</a></h4><p>RUN指令用来在当前镜像中运行指定的命令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y nginx</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"apt-get"</span>, <span class="string">"install"</span>, <span class="string">"-y"</span>, <span class="string">"nginx"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="13-EXPOSE"><a href="#13-EXPOSE" class="headerlink" title="13. EXPOSE"></a><a name="expose" style="color: inherit">13. EXPOSE</a></h4><p>EXPOSE指令用来向外部公开容器的指定端口。可以指定多个EXPOSE指令来公开多个端口。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">2181</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Dockerfile由一系列的指令和参数组成。每条指令，如FROM，都必须为大写字母。Dockerfile中的指令会按顺序从上到下执行，所以应该根据需要合理安排指令的顺序。Dockerfile中可以放入很多指令，这些指令包括&lt;a href=&quot;#cmd&quot;&gt;&lt;code&gt;CMD&lt;
      
    
    </summary>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/categories/DOCKER/"/>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/tags/DOCKER/"/>
    
      <category term="DOCKERFILE" scheme="http://huermosi.xyz/tags/DOCKERFILE/"/>
    
      <category term="指令" scheme="http://huermosi.xyz/tags/%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>用Dockerfile文件和docker build命令构建镜像</title>
    <link href="http://huermosi.xyz/2019/20200212215828/"/>
    <id>http://huermosi.xyz/2019/20200212215828/</id>
    <published>2019-10-02T13:58:28.000Z</published>
    <updated>2021-04-08T08:49:31.556Z</updated>
    
    <content type="html"><![CDATA[<p>Docker推荐使用<code>Dockerfile</code>文件和<code>docker build</code>命令来构建镜像。对比<code>docker commit</code>构建镜像的方式，这种方式更灵活、更强大。<code>Dockerfile</code>使用基本的基于<code>DSL</code>语法的指令来构建一个Docker镜像，之后使用<code>docker build</code>命令基于该<code>Dockerfile</code>中的指令构建一个新的镜像。详细的Dockerfile指令看。</p><p>创建一个目录作为构建镜像的工作目录（也叫构建上下文），并在里面创建初始的Dockerfile。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> makedir static_web</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> static_web</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch Dockerfile</span></span><br></pre></td></tr></table></figure><p>Dockerfile文件内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># version: 0.0.1</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Jerry <span class="string">"xxxx@163.com"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y nginx</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>使用<code>docker build</code>命令构建第一个镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> static_web</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t=<span class="string">"huyaoban/static_web"</span> .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t=<span class="string">"huyaoban/static_web:v1"</span> .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build --no-cache -t=<span class="string">"huyaoban/static_web:v1"</span> .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t=<span class="string">"huyaoban/static_web:v1"</span> git@github.com:jamtur01/docker-static_web</span></span><br></pre></td></tr></table></figure><p><code>-t</code>选项为新镜像设置仓库和名称，也可以指定标签，如果不指定，默认为<code>latest</code>。<br><code>--no-cache</code>选项告诉Docker构建过程不要使用构建缓存。<br>命令最后面的<code>.</code>告诉Docker到本地目录中去找Dockerfile文件。也可以指定一个Git仓库地址来指定Dockerfile的位置，Dockerfile文件必须在这个Git仓库的根目录下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker推荐使用&lt;code&gt;Dockerfile&lt;/code&gt;文件和&lt;code&gt;docker build&lt;/code&gt;命令来构建镜像。对比&lt;code&gt;docker commit&lt;/code&gt;构建镜像的方式，这种方式更灵活、更强大。&lt;code&gt;Dockerfile&lt;/co
      
    
    </summary>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/categories/DOCKER/"/>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/tags/DOCKER/"/>
    
      <category term="镜像" scheme="http://huermosi.xyz/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="BUILD" scheme="http://huermosi.xyz/tags/BUILD/"/>
    
      <category term="DOCKERFILE" scheme="http://huermosi.xyz/tags/DOCKERFILE/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器的基本命令</title>
    <link href="http://huermosi.xyz/2019/20200212153549/"/>
    <id>http://huermosi.xyz/2019/20200212153549/</id>
    <published>2019-10-02T07:35:49.000Z</published>
    <updated>2021-04-08T08:49:31.552Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍一些Docker容器的基本命令，以便日后可方便快速查阅，方便他人的同时提升自己。</p><h5 id="1-查看Docker信息"><a href="#1-查看Docker信息" class="headerlink" title="1 查看Docker信息"></a>1 查看Docker信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker info</span></span><br></pre></td></tr></table></figure><h5 id="2-创建容器"><a href="#2-创建容器" class="headerlink" title="2 创建容器"></a>2 创建容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -i -t ubuntu /bin/bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --restart=always --name jerry_container -d ubuntu /bin/sh -c <span class="string">"while true; do echo hello world; sleep 1; done;"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run  --name jerry_container -i -t ubuntu /bin/bash</span></span><br><span class="line">将容器的80端口绑定到宿主机的一个随机端口</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 80 --name static_web 9f98ad5f2a2f nginx -g <span class="string">"daemon off;"</span></span></span><br><span class="line">将容器的80端口绑定到宿主机的8080端口</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8080:80 --name static_web 9f98ad5f2a2f nginx -g <span class="string">"daemon off;"</span></span></span><br><span class="line">将容器的80端口绑定到宿主机的127.0.0.1这个IP的8080端口</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 127.0.0.1:8080:80 --name static_web 9f98ad5f2a2f nginx -g <span class="string">"daemon off;"</span></span></span><br><span class="line">将容器的80端口绑定到宿主机的127.0.0.1这个IP的随机端口</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 127.0.0.1::80 --name static_web 9f98ad5f2a2f nginx -g <span class="string">"daemon off;"</span></span></span><br><span class="line">将Dockerfile中EXPOSE指令中设置的所有端口绑定到宿主机的随机端口</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name static_web 9f98ad5f2a2f nginx -g <span class="string">"daemon off;"</span></span></span><br></pre></td></tr></table></figure><p>以上命令都能创建容器，但是各个命令指定的参数不同。</p><ul><li><code>-i</code>参数开启容器中的标准输入<code>STDIN</code>。</li><li><code>-t</code>参数告诉Docker为容器分配一个伪tty终端，和-i参数组合使用可以创建一个Shell交互式容器。</li><li><code>--name</code>参数指定容器的名称。</li><li><code>-p</code>参数将容器的端口绑定到宿主机上的端口，这样我们访问宿主机的端口，就相当于访问容器的端口。</li><li><code>-P</code>参数将<code>Dockerfile</code>中<code>EXPOSE</code>指令中设置的所有端口绑定到宿主机的随机端口</li><li><code>-d</code>参数创建一个守护式容器，即长期运行的容器。守护式容器没有交互式会话。</li><li><code>--restart</code>参数由于某种错误导致容器停止，该参数可自动重启容器。值有<code>always</code>和<code>on-failure</code>。<code>on-failure</code>在容器退出码非0时才会自动重启，还可接受重启次数参数<code>on-failure:5</code>。</li><li><code>ubuntu</code>和<code>9f98ad5f2a2f</code>指定容器使用的镜像。</li><li><code>/bin/bash</code>和<code>nginx</code>指定容器启动时将要执行的命令。</li></ul><h5 id="3-启动停止容器"><a href="#3-启动停止容器" class="headerlink" title="3 启动停止容器"></a>3 启动停止容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start 9f98ad5f2a2f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker restart 9f98ad5f2a2f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop 9f98ad5f2a2f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">kill</span> 9f98ad5f2a2f</span></span><br></pre></td></tr></table></figure><p><code>docker stop</code>命令会向Docker容器进程发送<code>SIGTERM</code>信号。如果你想快速停止某个容器，可以使用<code>docker kill</code>命令来向容器进程发送<code>SIGKILL</code>信号。</p><h5 id="4-查看容器列表"><a href="#4-查看容器列表" class="headerlink" title="4 查看容器列表"></a>4 查看容器列表</h5><p>查看运行中的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a</span></span><br></pre></td></tr></table></figure><p>查看最后一个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -l</span></span><br></pre></td></tr></table></figure><p>查看最近5个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -n 5</span></span><br></pre></td></tr></table></figure><h5 id="5-查看容器日志"><a href="#5-查看容器日志" class="headerlink" title="5 查看容器日志"></a>5 查看容器日志</h5><p>附着到容器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker attach 9f98ad5f2a2f</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs 9f98ad5f2a2f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker logs -f 9f98ad5f2a2f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker logs -ft 9f98ad5f2a2f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker logs --tail 10 9f98ad5f2a2f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker logs --tail 0 -f 9f98ad5f2a2f</span></span><br></pre></td></tr></table></figure><h5 id="6-容器内的进程"><a href="#6-容器内的进程" class="headerlink" title="6 容器内的进程"></a>6 容器内的进程</h5><p>查看容器内运行的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top 9f98ad5f2a2f</span></span><br></pre></td></tr></table></figure><p>在容器内部运行新进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -d 9f98ad5f2a2f touch /etc/new_config_file</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -i -t 9f98ad5f2a2f /bin/bash</span></span><br></pre></td></tr></table></figure><p>在容器内运行的进程有两种类型：后台任务和交互式任务。</p><h5 id="7-查看容器详细信息"><a href="#7-查看容器详细信息" class="headerlink" title="7 查看容器详细信息"></a>7 查看容器详细信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect 9f98ad5f2a2f</span></span><br></pre></td></tr></table></figure><h5 id="8-查看容器的端口映射"><a href="#8-查看容器的端口映射" class="headerlink" title="8 查看容器的端口映射"></a>8 查看容器的端口映射</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker port 95d266e2e9ed</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker port 95d266e2e9ed 80</span></span><br></pre></td></tr></table></figure><h5 id="9-删除容器"><a href="#9-删除容器" class="headerlink" title="9 删除容器"></a>9 删除容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm 9f98ad5f2a2f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm `docker ps -a -q`</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要介绍一些Docker容器的基本命令，以便日后可方便快速查阅，方便他人的同时提升自己。&lt;/p&gt;
&lt;h5 id=&quot;1-查看Docker信息&quot;&gt;&lt;a href=&quot;#1-查看Docker信息&quot; class=&quot;headerlink&quot; title=&quot;1 查看Docker信息&quot;&gt;
      
    
    </summary>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/categories/DOCKER/"/>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/tags/DOCKER/"/>
    
      <category term="容器" scheme="http://huermosi.xyz/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="命令" scheme="http://huermosi.xyz/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像</title>
    <link href="http://huermosi.xyz/2019/20200212201541/"/>
    <id>http://huermosi.xyz/2019/20200212201541/</id>
    <published>2019-10-01T12:15:41.000Z</published>
    <updated>2021-04-08T08:49:31.553Z</updated>
    
    <content type="html"><![CDATA[<p>Docker镜像是由<code>文件系统</code>叠加而成。最底端是一个引导文件系统<code>bootfs</code>。Docker镜像的第二层是root文件系统<code>rootfs</code>，它位于引导文件系统之上。</p><p>在传统的Linux引导过程中，root文件系统会最先以只读的方式加载，当引导结束并完成完整性检查之后，它才会被切换为读写模式。但是在Docker里，root文件系统永远只能是只读状态，并且Docker利用<code>联合加载（union mount）</code>技术又会在root文件系统层上加载更多的只读文件系统。联合加载指的是一次同时加载多个文件系统，但是在外面看起来只能看到一个文件系统。联合加载会将各层文件系统叠加到一起，这样最终的文件系统会包含所有底层的文件和目录。</p><p>Docker将这样的文件系统称为镜像。一个镜像可以放到另一个镜像的顶部。位于下面的镜像称为父镜像，可以依次类推，直到镜像栈的最底部，最底部的镜像称为基础镜像。最后，当从一个镜像启动容器时，Docker会在该镜像的最顶层加载一个读写文件系统。我们在Docker中运行的程序就是在这个读写层中执行的。<br><img src="/2019/20200212201541/docker-filesystem.jpg" alt="Docker文件系统层"></p><h4 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1 基本命令"></a>1 基本命令</h4><ul><li><p>列出镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">$ docker images ubuntu</span><br><span class="line">$ docker images huyaoban/centos-web</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull centos</span><br><span class="line">$ docker pull ubuntu</span><br><span class="line">$ docker pull ubuntu:12.04</span><br></pre></td></tr></table></figure><p>拉取镜像时可指定标签，不指定默认为<code>latest</code>。</p></li><li><p>查看镜像详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect huyaoban/centos-web</span><br><span class="line">$ docker inspect huyaoban/centos-web:httpd</span><br></pre></td></tr></table></figure></li><li><p>查看镜像构建历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> 9f98ad5f2a2f</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi 37d32ce8889a</span><br></pre></td></tr></table></figure></li><li><p>登录Docker Hub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure><p>登录的认证信息将会保存到<code>$HOME/.dockercfg</code>文件中。</p></li><li><p>推送镜像到Docker Hub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push huyaoban/centos-web:httpd</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-制作镜像"><a href="#2-制作镜像" class="headerlink" title="2 制作镜像"></a>2 制作镜像</h4><p>制作Docker镜像有以下两种方法。</p><ul><li>使用<code>docker commit</code>命令。</li><li>使用<code>docker build</code>命令和<code>Dockerfile</code>文件。</li></ul><p>下面先介绍如何使用docker commit构建Docker镜像。通过Dockerfile构建镜像查看另一篇文章。</p><h5 id="2-1-登录Docker-Hub"><a href="#2-1-登录Docker-Hub" class="headerlink" title="2.1 登录Docker Hub"></a>2.1 登录Docker Hub</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure><h5 id="2-2-从基础镜像创建一个容器"><a href="#2-2-从基础镜像创建一个容器" class="headerlink" title="2.2 从基础镜像创建一个容器"></a>2.2 从基础镜像创建一个容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h5 id="2-2-在新创建的容器里安装我们需要的软件以及做其他配置"><a href="#2-2-在新创建的容器里安装我们需要的软件以及做其他配置" class="headerlink" title="2.2 在新创建的容器里安装我们需要的软件以及做其他配置"></a>2.2 在新创建的容器里安装我们需要的软件以及做其他配置</h5><h5 id="2-4-配置完成后，提交所做的修改"><a href="#2-4-配置完成后，提交所做的修改" class="headerlink" title="2.4 配置完成后，提交所做的修改"></a>2.4 配置完成后，提交所做的修改</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit 4aab3ce3cb76 huyaoban/centos-web</span><br><span class="line">$ docker commit -m=<span class="string">"A new custom image"</span> --author=<span class="string">"Jerry"</span> 4aab3ce3cb76 huyaoban/centos-web:httpd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker镜像是由&lt;code&gt;文件系统&lt;/code&gt;叠加而成。最底端是一个引导文件系统&lt;code&gt;bootfs&lt;/code&gt;。Docker镜像的第二层是root文件系统&lt;code&gt;rootfs&lt;/code&gt;，它位于引导文件系统之上。&lt;/p&gt;
&lt;p&gt;在传统的Linux引导过
      
    
    </summary>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/categories/DOCKER/"/>
    
    
      <category term="DOCKER" scheme="http://huermosi.xyz/tags/DOCKER/"/>
    
      <category term="镜像" scheme="http://huermosi.xyz/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="BOOTFS" scheme="http://huermosi.xyz/tags/BOOTFS/"/>
    
      <category term="ROOTFS" scheme="http://huermosi.xyz/tags/ROOTFS/"/>
    
      <category term="COMMIT" scheme="http://huermosi.xyz/tags/COMMIT/"/>
    
      <category term="BUILD" scheme="http://huermosi.xyz/tags/BUILD/"/>
    
  </entry>
  
</feed>
